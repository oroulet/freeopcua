// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

/// @brief Opc Ua Binary.
/// @license GNU LGPL
///
/// Distributed under the GNU LGPL License
/// (See accompanying file LICENSE or copy at
/// http://www.gnu.org/licenses/lgpl.html)
///

#pragma once

#include <opc/ua/protocol/enum_auto.h>
#include <opc/ua/protocol/attribute_ids.h>
#include <opc/ua/protocol/nodeid.h>
#include <opc/ua/protocol/types.h>
#include <opc/ua/protocol/variant.h>
#include <opc/ua/protocol/data_value.h>

namespace OpcUa
{

    // An XML element encoded as a UTF-8 string.
    struct XmlElement 
    {
         int32_t Length;
         std::vector<char> Value;
    };

    // A recursive structure containing diagnostic information associated with a status code.
    struct DiagnosticInfo 
    {
         uint8_t Encoding;
         int32_t SymbolicId;
         int32_t NamespaceURI;
         int32_t LocalizedText;
         std::string AdditionalInfo;
         OpcUa::StatusCode InnerStatusCode;
         std::shared_ptr<OpcUa::DiagnosticInfo> InnerDiagnosticInfo;
    };

    // A serialized object prefixed with its data type identifier.
    struct ExtensionObject 
    {
         uint8_t Encoding;
         OpcUa::ExpandedNodeId TypeId;
         std::vector<uint8_t> Body;
    };

    // An argument for a method.
    struct Argument  : public ExtensionObject
    {
         std::string Name;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         OpcUa::LocalizedText Description;
    };

    // A mapping between a value of an enumerated type and a name and description.
    struct EnumValueType  : public ExtensionObject
    {
         int64_t Value;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
    };

    struct TimeZoneDataType  : public ExtensionObject
    {
         int16_t Offset;
         bool DaylightSavingInOffset;
    };

    // Describes an application and how to find it.
    struct ApplicationDescription  : public ExtensionObject
    {
         std::string ApplicationUri;
         std::string ProductUri;
         OpcUa::LocalizedText ApplicationName;
         OpcUa::ApplicationType ApplicationType;
         std::string GatewayServerUri;
         std::string DiscoveryProfileUri;
         std::vector<std::string> DiscoveryUrls;
    };

    // The header passed with every server request.
    struct RequestHeader  : public ExtensionObject
    {
         OpcUa::NodeId AuthenticationToken;
         OpcUa::DateTime Timestamp;
         uint32_t RequestHandle;
         uint32_t ReturnDiagnostics;
         std::string AuditEntryId;
         uint32_t TimeoutHint;
         OpcUa::ExtensionObject AdditionalHeader;

         RequestHeader();
    };

    // The header passed with every server response.
    struct ResponseHeader  : public ExtensionObject
    {
         OpcUa::DateTime Timestamp;
         uint32_t RequestHandle;
         OpcUa::StatusCode ServiceResult;
         OpcUa::DiagnosticInfo ServiceDiagnostics;
         std::vector<std::string> StringTable;
         OpcUa::ExtensionObject AdditionalHeader;

         ResponseHeader();
    };

    // The response returned by all services when there is a service level error.
    struct ServiceFault  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
    };

    struct FindServersParameters 
    {
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         std::vector<std::string> ServerUris;
    };

    // Finds the servers known to the discovery server.
    struct FindServersRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::FindServersParameters Parameters;

         FindServersRequest();
    };

    struct FindServersResult 
    {
         std::vector<OpcUa::ApplicationDescription> Servers;
    };

    // Finds the servers known to the discovery server.
    struct FindServersResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::FindServersResult Parameters;

         FindServersResponse();
    };

    // Describes a user token that can be used with a server.
    struct UserTokenPolicy  : public ExtensionObject
    {
         std::string PolicyId;
         OpcUa::UserTokenType TokenType;
         std::string IssuedTokenType;
         std::string IssuerEndpointUrl;
         std::string SecurityPolicyUri;
    };

    // The description of a endpoint that can be used to access a server.
    struct EndpointDescription  : public ExtensionObject
    {
         std::string EndpointUrl;
         OpcUa::ApplicationDescription Server;
         OpcUa::ByteString ServerCertificate;
         OpcUa::MessageSecurityMode SecurityMode;
         std::string SecurityPolicyUri;
         std::vector<OpcUa::UserTokenPolicy> UserIdentityTokens;
         std::string TransportProfileUri;
         uint8_t SecurityLevel;
    };

    struct GetEndpointsParameters 
    {
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         std::vector<std::string> ProfileUris;
    };

    // Gets the endpoints used by the server.
    struct GetEndpointsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::GetEndpointsParameters Parameters;

         GetEndpointsRequest();
    };

    // Gets the endpoints used by the server.
    struct GetEndpointsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::EndpointDescription> Endpoints;

         GetEndpointsResponse();
    };

    // The information required to register a server with a discovery server.
    struct RegisteredServer  : public ExtensionObject
    {
         std::string ServerUri;
         std::string ProductUri;
         std::vector<OpcUa::LocalizedText> ServerNames;
         OpcUa::ApplicationType ServerType;
         std::string GatewayServerUri;
         std::vector<std::string> DiscoveryUrls;
         std::string SemaphoreFilePath;
         bool IsOnline;
    };

    struct RegisterServerParameters 
    {
         OpcUa::RegisteredServer Server;
    };

    // Registers a server with the discovery server.
    struct RegisterServerRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::RegisterServerParameters Parameters;

         RegisterServerRequest();
    };

    // Registers a server with the discovery server.
    struct RegisterServerResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;

         RegisterServerResponse();
    };

    // The token that identifies a set of keys for an active secure channel.
    struct ChannelSecurityToken  : public ExtensionObject
    {
         uint32_t ChannelId;
         uint32_t TokenId;
         OpcUa::DateTime CreatedAt;
         uint32_t RevisedLifetime;
    };

    struct OpenSecureChannelParameters 
    {
         uint32_t ClientProtocolVersion;
         OpcUa::SecurityTokenRequestType RequestType;
         OpcUa::MessageSecurityMode SecurityMode;
         OpcUa::ByteString ClientNonce;
         uint32_t RequestedLifetime;

         OpenSecureChannelParameters();
    };

    // Creates a secure channel with a server.
    struct OpenSecureChannelRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::OpenSecureChannelParameters Parameters;

         OpenSecureChannelRequest();
    };

    struct OpenSecureChannelResult 
    {
         uint32_t ServerProtocolVersion;
         OpcUa::ChannelSecurityToken SecurityToken;
         OpcUa::ByteString ServerNonce;
    };

    // Creates a secure channel with a server.
    struct OpenSecureChannelResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::OpenSecureChannelResult Parameters;

         OpenSecureChannelResponse();
    };

    // Closes a secure channel.
    struct CloseSecureChannelRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;

         CloseSecureChannelRequest();
    };

    // Closes a secure channel.
    struct CloseSecureChannelResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;

         CloseSecureChannelResponse();
    };

    // A software certificate with a digital signature.
    struct SignedSoftwareCertificate  : public ExtensionObject
    {
         OpcUa::ByteString CertificateData;
         OpcUa::ByteString Signature;
    };

    // A digital signature.
    struct SignatureData  : public ExtensionObject
    {
         std::string Algorithm;
         OpcUa::ByteString Signature;
    };

    struct CreateSessionParameters 
    {
         OpcUa::ApplicationDescription ClientDescription;
         std::string ServerUri;
         std::string EndpointUrl;
         std::string SessionName;
         OpcUa::ByteString ClientNonce;
         OpcUa::ByteString ClientCertificate;
         double RequestedSessionTimeout;
         uint32_t MaxResponseMessageSize;
    };

    // Creates a new session with the server.
    struct CreateSessionRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::CreateSessionParameters Parameters;

         CreateSessionRequest();
    };

    struct CreateSessionResult 
    {
         OpcUa::NodeId SessionId;
         OpcUa::NodeId AuthenticationToken;
         double RevisedSessionTimeout;
         OpcUa::ByteString ServerNonce;
         OpcUa::ByteString ServerCertificate;
         std::vector<OpcUa::EndpointDescription> ServerEndpoints;
         std::vector<OpcUa::SignedSoftwareCertificate> ServerSoftwareCertificates;
         OpcUa::SignatureData ServerSignature;
         uint32_t MaxRequestMessageSize;
    };

    // Creates a new session with the server.
    struct CreateSessionResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::CreateSessionResult Parameters;

         CreateSessionResponse();
    };

    // A base type for a user identity token.
    struct UserIdentityToken  : public ExtensionObject
    {
         std::string PolicyId;

         UserIdentityToken();
    };

    // A token representing an anonymous user.
    struct AnonymousIdentityToken  : public UserIdentityToken
    {
    };

    // A token representing a user identified by a user name and password.
    struct UserNameIdentityToken  : public UserIdentityToken
    {
         std::string UserName;
         OpcUa::ByteString Password;
         std::string EncryptionAlgorithm;
    };

    // A token representing a user identified by an X509 certificate.
    struct X509IdentityToken  : public UserIdentityToken
    {
         OpcUa::ByteString CertificateData;
    };

    // A token representing a user identified by a WS-Security XML token.
    struct IssuedIdentityToken  : public UserIdentityToken
    {
         OpcUa::ByteString TokenData;
         std::string EncryptionAlgorithm;
    };

    struct ActivateSessionParameters 
    {
         OpcUa::SignatureData ClientSignature;
         std::vector<OpcUa::SignedSoftwareCertificate> ClientSoftwareCertificates;
         std::vector<std::string> LocaleIds;
         OpcUa::ExtensionObject UserIdentityToken;
         OpcUa::SignatureData UserTokenSignature;
    };

    // Activates a session with the server.
    struct ActivateSessionRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::ActivateSessionParameters Parameters;

         ActivateSessionRequest();
    };

    struct ActivateSessionResult 
    {
         OpcUa::ByteString ServerNonce;
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    // Activates a session with the server.
    struct ActivateSessionResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::ActivateSessionResult Parameters;

         ActivateSessionResponse();
    };

    // Closes a session with the server.
    struct CloseSessionRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         bool DeleteSubscriptions;

         CloseSessionRequest();
    };

    // Closes a session with the server.
    struct CloseSessionResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;

         CloseSessionResponse();
    };

    struct CancelParameters 
    {
         uint32_t RequestHandle;
    };

    // Cancels an outstanding request.
    struct CancelRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::CancelParameters Parameters;

         CancelRequest();
    };

    struct CancelResult 
    {
         uint32_t CancelCount;
    };

    // Cancels an outstanding request.
    struct CancelResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::CancelResult Parameters;

         CancelResponse();
    };

    // The base attributes for all nodes.
    struct NodeAttributes  : public ExtensionObject
    {
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
    };

    // The attributes for an object node.
    struct ObjectAttributes  : public NodeAttributes
    {
         uint8_t EventNotifier;
    };

    // The attributes for a variable node.
    struct VariableAttributes  : public NodeAttributes
    {
         OpcUa::Variant Value;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         uint8_t AccessLevel;
         uint8_t UserAccessLevel;
         double MinimumSamplingInterval;
         bool Historizing;
    };

    // The attributes for a method node.
    struct MethodAttributes  : public NodeAttributes
    {
         bool Executable;
         bool UserExecutable;
    };

    // The attributes for an object type node.
    struct ObjectTypeAttributes  : public NodeAttributes
    {
         bool IsAbstract;
    };

    // The attributes for a variable type node.
    struct VariableTypeAttributes  : public NodeAttributes
    {
         OpcUa::Variant Value;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         bool IsAbstract;
    };

    // The attributes for a reference type node.
    struct ReferenceTypeAttributes  : public NodeAttributes
    {
         bool IsAbstract;
         bool Symmetric;
         OpcUa::LocalizedText InverseName;
    };

    // The attributes for a data type node.
    struct DataTypeAttributes  : public NodeAttributes
    {
         bool IsAbstract;
    };

    // The attributes for a view node.
    struct ViewAttributes  : public NodeAttributes
    {
         bool ContainsNoLoops;
         uint8_t EventNotifier;
    };

    // A request to add a node to the server address space.
    struct AddNodesItem  : public ExtensionObject
    {
         OpcUa::ExpandedNodeId ParentNodeId;
         OpcUa::NodeId ReferenceTypeId;
         OpcUa::ExpandedNodeId RequestedNewNodeId;
         OpcUa::QualifiedName BrowseName;
         OpcUa::NodeClass NodeClass;
         OpcUa::ExtensionObject NodeAttributes;
         OpcUa::ExpandedNodeId TypeDefinition;
    };

    // A result of an add node operation.
    struct AddNodesResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         OpcUa::NodeId AddedNodeId;
    };

    struct AddNodesParameters 
    {
         std::vector<OpcUa::AddNodesItem> NodesToAdd;
    };

    // Adds one or more nodes to the server address space.
    struct AddNodesRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::AddNodesParameters Parameters;

         AddNodesRequest();
    };

    // Adds one or more nodes to the server address space.
    struct AddNodesResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::AddNodesResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         AddNodesResponse();
    };

    // A request to add a reference to the server address space.
    struct AddReferencesItem  : public ExtensionObject
    {
         OpcUa::NodeId SourceNodeId;
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         std::string TargetServerUri;
         OpcUa::ExpandedNodeId TargetNodeId;
         OpcUa::NodeClass TargetNodeClass;
    };

    struct AddReferencesParameters 
    {
         std::vector<OpcUa::AddReferencesItem> ReferencesToAdd;
    };

    // Adds one or more references to the server address space.
    struct AddReferencesRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::AddReferencesParameters Parameters;

         AddReferencesRequest();
    };

    struct AddReferencesResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    // Adds one or more references to the server address space.
    struct AddReferencesResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::AddReferencesResult Parameters;

         AddReferencesResponse();
    };

    // A request to delete a node to the server address space.
    struct DeleteNodesItem  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
         bool DeleteTargetReferences;
    };

    struct DeleteNodesParameters 
    {
         std::vector<OpcUa::DeleteNodesItem> NodesToDelete;
    };

    // Delete one or more nodes from the server address space.
    struct DeleteNodesRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::DeleteNodesParameters Parameters;

         DeleteNodesRequest();
    };

    struct DeleteNodesResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    // Delete one or more nodes from the server address space.
    struct DeleteNodesResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::DeleteNodesResult Parameters;

         DeleteNodesResponse();
    };

    // A request to delete a node from the server address space.
    struct DeleteReferencesItem  : public ExtensionObject
    {
         OpcUa::NodeId SourceNodeId;
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         OpcUa::ExpandedNodeId TargetNodeId;
         bool DeleteBidirectional;
    };

    struct DeleteReferencesParameters 
    {
         std::vector<OpcUa::DeleteReferencesItem> ReferencesToDelete;
    };

    // Delete one or more references from the server address space.
    struct DeleteReferencesRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::DeleteReferencesParameters Parameters;

         DeleteReferencesRequest();
    };

    struct DeleteReferencesResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    // Delete one or more references from the server address space.
    struct DeleteReferencesResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::DeleteReferencesResult Parameters;

         DeleteReferencesResponse();
    };

    // The view to browse.
    struct ViewDescription  : public ExtensionObject
    {
         OpcUa::NodeId ViewId;
         OpcUa::DateTime Timestamp;
         uint32_t ViewVersion;
    };

    // A request to browse the the references from a node.
    struct BrowseDescription  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
         OpcUa::BrowseDirection BrowseDirection;
         OpcUa::NodeId ReferenceTypeId;
         bool IncludeSubtypes;
         OpcUa::NodeClass NodeClassMask;
         OpcUa::BrowseResultMask ResultMask;

         BrowseDescription();
    };

    // The description of a reference.
    struct ReferenceDescription  : public ExtensionObject
    {
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         OpcUa::ExpandedNodeId NodeId;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::NodeClass NodeClass;
         OpcUa::ExpandedNodeId TypeDefinition;

         ReferenceDescription();
    };

    // The result of a browse operation.
    struct BrowseResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         OpcUa::ByteString ContinuationPoint;
         std::vector<OpcUa::ReferenceDescription> References;
    };

    struct BrowseParameters 
    {
         OpcUa::ViewDescription View;
         uint32_t RequestedMaxReferencesPerNode;
         std::vector<OpcUa::BrowseDescription> NodesToBrowse;
    };

    // Browse the references for one or more nodes from the server address space.
    struct BrowseRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::BrowseParameters Parameters;

         BrowseRequest();
    };

    // Browse the references for one or more nodes from the server address space.
    struct BrowseResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::BrowseResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         BrowseResponse();
    };

    struct BrowseNextParameters 
    {
         bool ReleaseContinuationPoints;
         std::vector<OpcUa::ByteString> ContinuationPoints;
    };

    // Continues one or more browse operations.
    struct BrowseNextRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::BrowseNextParameters Parameters;

         BrowseNextRequest();
    };

    struct BrowseNextResult 
    {
         std::vector<OpcUa::BrowseResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    // Continues one or more browse operations.
    struct BrowseNextResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::BrowseNextResult Parameters;

         BrowseNextResponse();
    };

    // An element in a relative path.
    struct RelativePathElement  : public ExtensionObject
    {
         OpcUa::NodeId ReferenceTypeId;
         bool IsInverse;
         bool IncludeSubtypes;
         OpcUa::QualifiedName TargetName;

         RelativePathElement();
    };

    // A relative path constructed from reference types and browse names.
    struct RelativePath  : public ExtensionObject
    {
         std::vector<OpcUa::RelativePathElement> Elements;
    };

    // A request to translate a path into a node id.
    struct BrowsePath  : public ExtensionObject
    {
         OpcUa::NodeId StartingNode;
         OpcUa::RelativePath RelativePath;
    };

    // The target of the translated path.
    struct BrowsePathTarget  : public ExtensionObject
    {
         OpcUa::ExpandedNodeId TargetId;
         uint32_t RemainingPathIndex;
    };

    // The result of a translate opearation.
    struct BrowsePathResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::BrowsePathTarget> Targets;
    };

    struct TranslateBrowsePathsToNodeIdsParameters 
    {
         std::vector<OpcUa::BrowsePath> BrowsePaths;
    };

    // Translates one or more paths in the server address space.
    struct TranslateBrowsePathsToNodeIdsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::TranslateBrowsePathsToNodeIdsParameters Parameters;

         TranslateBrowsePathsToNodeIdsRequest();
    };

    struct TranslateBrowsePathsToNodeIdsResult 
    {
         std::vector<OpcUa::BrowsePathResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    // Translates one or more paths in the server address space.
    struct TranslateBrowsePathsToNodeIdsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::TranslateBrowsePathsToNodeIdsResult Parameters;

         TranslateBrowsePathsToNodeIdsResponse();
    };

    struct RegisterNodesParameters 
    {
         std::vector<OpcUa::NodeId> NodesToRegister;
    };

    // Registers one or more nodes for repeated use within a session.
    struct RegisterNodesRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::RegisterNodesParameters Parameters;

         RegisterNodesRequest();
    };

    struct RegisterNodesResult 
    {
         std::vector<OpcUa::NodeId> RegisteredNodeIds;
    };

    // Registers one or more nodes for repeated use within a session.
    struct RegisterNodesResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::RegisterNodesResult Parameters;

         RegisterNodesResponse();
    };

    struct UnregisterNodesParameters 
    {
         std::vector<OpcUa::NodeId> NodesToUnregister;
    };

    // Unregisters one or more previously registered nodes.
    struct UnregisterNodesRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::UnregisterNodesParameters Parameters;

         UnregisterNodesRequest();
    };

    // Unregisters one or more previously registered nodes.
    struct UnregisterNodesResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;

         UnregisterNodesResponse();
    };

    struct EndpointConfiguration  : public ExtensionObject
    {
         int32_t OperationTimeout;
         bool UseBinaryEncoding;
         int32_t MaxStringLength;
         int32_t MaxByteStringLength;
         int32_t MaxArrayLength;
         int32_t MaxMessageSize;
         int32_t MaxBufferSize;
         int32_t ChannelLifetime;
         int32_t SecurityTokenLifetime;
    };

    struct SupportedProfile  : public ExtensionObject
    {
         std::string OrganizationUri;
         std::string ProfileId;
         std::string ComplianceTool;
         OpcUa::DateTime ComplianceDate;
         OpcUa::ComplianceLevel ComplianceLevel;
         std::vector<std::string> UnsupportedUnitIds;
    };

    struct SoftwareCertificate  : public ExtensionObject
    {
         std::string ProductName;
         std::string ProductUri;
         std::string VendorName;
         OpcUa::ByteString VendorProductCertificate;
         std::string SoftwareVersion;
         std::string BuildNumber;
         OpcUa::DateTime BuildDate;
         std::string IssuedBy;
         OpcUa::DateTime IssueDate;
         std::vector<OpcUa::SupportedProfile> SupportedProfiles;
    };

    struct QueryDataDescription  : public ExtensionObject
    {
         OpcUa::RelativePath RelativePath;
         OpcUa::AttributeID AttributeId;
         std::string IndexRange;
    };

    struct NodeTypeDescription  : public ExtensionObject
    {
         OpcUa::ExpandedNodeId TypeDefinitionNode;
         bool IncludeSubTypes;
         std::vector<OpcUa::QueryDataDescription> DataToReturn;
    };

    struct QueryDataSet  : public ExtensionObject
    {
         OpcUa::ExpandedNodeId NodeId;
         OpcUa::ExpandedNodeId TypeDefinitionNode;
         std::vector<OpcUa::Variant> Values;
    };

    struct NodeReference  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         std::vector<OpcUa::NodeId> ReferencedNodeIds;
    };

    struct ContentFilterElement  : public ExtensionObject
    {
         OpcUa::FilterOperator FilterOperator;
         std::vector<OpcUa::ExtensionObject> FilterOperands;
    };

    struct ContentFilter  : public ExtensionObject
    {
         std::vector<OpcUa::ContentFilterElement> Elements;
    };

    struct FilterOperand  : public ExtensionObject
    {
    };

    struct ElementOperand  : public FilterOperand
    {
         uint32_t Index;
    };

    struct LiteralOperand  : public FilterOperand
    {
         OpcUa::Variant Value;
    };

    struct AttributeOperand  : public FilterOperand
    {
         OpcUa::NodeId NodeId;
         std::string Alias;
         OpcUa::RelativePath BrowsePath;
         OpcUa::AttributeID AttributeId;
         std::string IndexRange;
    };

    struct SimpleAttributeOperand  : public FilterOperand
    {
         OpcUa::NodeId TypeDefinitionId;
         std::vector<OpcUa::QualifiedName> BrowsePath;
         OpcUa::AttributeID AttributeId;
         std::string IndexRange;
    };

    struct ContentFilterElementResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> OperandStatusCodes;
         std::vector<OpcUa::DiagnosticInfo> OperandDiagnosticInfos;
    };

    struct ContentFilterResult  : public ExtensionObject
    {
         std::vector<OpcUa::ContentFilterElementResult> ElementResults;
         std::vector<OpcUa::DiagnosticInfo> ElementDiagnosticInfos;
    };

    struct ParsingResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> DataStatusCodes;
         std::vector<OpcUa::DiagnosticInfo> DataDiagnosticInfos;
    };

    struct QueryFirstParameters 
    {
         OpcUa::ViewDescription View;
         std::vector<OpcUa::NodeTypeDescription> NodeTypes;
         OpcUa::ContentFilter Filter;
         uint32_t MaxDataSetsToReturn;
         uint32_t MaxReferencesToReturn;
    };

    struct QueryFirstRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::QueryFirstParameters Parameters;

         QueryFirstRequest();
    };

    struct QueryFirstResult 
    {
         std::vector<OpcUa::QueryDataSet> QueryDataSets;
         OpcUa::ByteString ContinuationPoint;
         std::vector<OpcUa::ParsingResult> ParsingResults;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
         OpcUa::ContentFilterResult FilterResult;
    };

    struct QueryFirstResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::QueryFirstResult Parameters;

         QueryFirstResponse();
    };

    struct QueryNextParameters 
    {
         bool ReleaseContinuationPoint;
         OpcUa::ByteString ContinuationPoint;
    };

    struct QueryNextRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::QueryNextParameters Parameters;

         QueryNextRequest();
    };

    struct QueryNextResult 
    {
         std::vector<OpcUa::QueryDataSet> QueryDataSets;
         OpcUa::ByteString RevisedContinuationPoint;
    };

    struct QueryNextResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::QueryNextResult Parameters;

         QueryNextResponse();
    };

    struct ReadValueId  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
         OpcUa::AttributeID AttributeId;
         std::string IndexRange;
         OpcUa::QualifiedName DataEncoding;

         ReadValueId();
    };

    struct ReadParameters 
    {
         double MaxAge;
         OpcUa::TimestampsToReturn TimestampsToReturn;
         std::vector<OpcUa::ReadValueId> AttributesToRead;

         ReadParameters();
    };

    struct ReadRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::ReadParameters Parameters;

         ReadRequest();
    };

    struct ReadResult 
    {
         std::vector<OpcUa::DataValue> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct ReadResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::ReadResult Parameters;

         ReadResponse();
    };

    struct HistoryReadValueId  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
         std::string IndexRange;
         OpcUa::QualifiedName DataEncoding;
         OpcUa::ByteString ContinuationPoint;
    };

    struct HistoryReadResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         OpcUa::ByteString ContinuationPoint;
         OpcUa::ExtensionObject HistoryData;
    };

    struct HistoryReadDetails  : public ExtensionObject
    {
    };

    struct ReadRawModifiedDetails  : public HistoryReadDetails
    {
         bool IsReadModified;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
         uint32_t NumValuesPerNode;
         bool ReturnBounds;
    };

    struct ReadAtTimeDetails  : public HistoryReadDetails
    {
         std::vector<OpcUa::DateTime> ReqTimes;
         bool UseSimpleBounds;
    };

    struct HistoryData  : public ExtensionObject
    {
         std::vector<OpcUa::DataValue> DataValues;
    };

    struct ModificationInfo  : public ExtensionObject
    {
         OpcUa::DateTime ModificationTime;
         OpcUa::HistoryUpdateType UpdateType;
         std::string UserName;
    };

    struct HistoryModifiedData  : public HistoryData
    {
         std::vector<OpcUa::ModificationInfo> ModificationInfos;
    };

    struct HistoryReadParameters 
    {
         OpcUa::ExtensionObject HistoryReadDetails;
         OpcUa::TimestampsToReturn TimestampsToReturn;
         bool ReleaseContinuationPoints;
         std::vector<OpcUa::HistoryReadValueId> AttributesToRead;
    };

    struct HistoryReadRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::HistoryReadParameters Parameters;

         HistoryReadRequest();
    };

    struct HistoryReadResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::HistoryReadResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         HistoryReadResponse();
    };

    struct WriteValue  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
         OpcUa::AttributeID AttributeId;
         std::string IndexRange;
         OpcUa::DataValue Value;
    };

    struct WriteParameters 
    {
         std::vector<OpcUa::WriteValue> NodesToWrite;
    };

    struct WriteRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::WriteParameters Parameters;

         WriteRequest();
    };

    struct WriteResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct WriteResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::WriteResult Parameters;

         WriteResponse();
    };

    struct HistoryUpdateDetails  : public ExtensionObject
    {
         OpcUa::NodeId NodeId;
    };

    struct UpdateDataDetails  : public HistoryUpdateDetails
    {
         OpcUa::PerformUpdateType PerformInsertReplace;
         std::vector<OpcUa::DataValue> UpdateValues;
    };

    struct UpdateStructureDataDetails  : public HistoryUpdateDetails
    {
         OpcUa::PerformUpdateType PerformInsertReplace;
         std::vector<OpcUa::DataValue> UpdateValues;
    };

    struct DeleteRawModifiedDetails  : public HistoryUpdateDetails
    {
         bool IsDeleteModified;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
    };

    struct DeleteAtTimeDetails  : public HistoryUpdateDetails
    {
         std::vector<OpcUa::DateTime> ReqTimes;
    };

    struct DeleteEventDetails  : public HistoryUpdateDetails
    {
         std::vector<OpcUa::ByteString> EventIds;
    };

    struct HistoryUpdateResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> OperationResults;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct HistoryUpdateParameters 
    {
         std::vector<OpcUa::ExtensionObject> HistoryUpdateDetails;
    };

    struct HistoryUpdateRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::HistoryUpdateParameters Parameters;

         HistoryUpdateRequest();
    };

    struct HistoryUpdateResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::HistoryUpdateResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         HistoryUpdateResponse();
    };

    struct CallMethodParameters 
    {
         OpcUa::NodeId MethodId;
         std::vector<OpcUa::Variant> InputArguments;
    };

    struct CallMethodRequest  : public ExtensionObject
    {
         OpcUa::NodeId ObjectId;
         OpcUa::CallMethodParameters Parameters;

         CallMethodRequest();
    };

    struct CallMethodResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> InputArgumentResults;
         std::vector<OpcUa::DiagnosticInfo> InputArgumentDiagnosticInfos;
         std::vector<OpcUa::Variant> OutputArguments;
    };

    struct CallParameters 
    {
         std::vector<OpcUa::CallMethodRequest> MethodsToCall;
    };

    struct CallRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::CallParameters Parameters;

         CallRequest();
    };

    struct CallResult 
    {
         std::vector<OpcUa::CallMethodResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct CallResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::CallResult Parameters;

         CallResponse();
    };

    struct MonitoringFilter  : public ExtensionObject
    {
    };

    struct DataChangeFilter  : public MonitoringFilter
    {
         OpcUa::DataChangeTrigger Trigger;
         uint32_t DeadbandType;
         double DeadbandValue;
    };

    struct EventFilter  : public MonitoringFilter
    {
         std::vector<OpcUa::SimpleAttributeOperand> SelectClauses;
         OpcUa::ContentFilter WhereClause;
    };

    struct ReadEventDetails  : public HistoryReadDetails
    {
         uint32_t NumValuesPerNode;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
         OpcUa::EventFilter Filter;
    };

    struct AggregateConfiguration  : public ExtensionObject
    {
         bool UseServerCapabilitiesDefaults;
         bool TreatUncertainAsBad;
         uint8_t PercentDataBad;
         uint8_t PercentDataGood;
         bool UseSlopedExtrapolation;
    };

    struct ReadProcessedDetails  : public HistoryReadDetails
    {
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
         double ProcessingInterval;
         std::vector<OpcUa::NodeId> AggregateType;
         OpcUa::AggregateConfiguration AggregateConfiguration;
    };

    struct AggregateFilter  : public MonitoringFilter
    {
         OpcUa::DateTime StartTime;
         OpcUa::NodeId AggregateType;
         double ProcessingInterval;
         OpcUa::AggregateConfiguration AggregateConfiguration;
    };

    struct MonitoringFilterResult  : public ExtensionObject
    {
    };

    struct EventFilterResult  : public MonitoringFilterResult
    {
         std::vector<OpcUa::StatusCode> SelectClauseResults;
         std::vector<OpcUa::DiagnosticInfo> SelectClauseDiagnosticInfos;
         OpcUa::ContentFilterResult WhereClauseResult;
    };

    struct HistoryUpdateEventResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         OpcUa::EventFilterResult EventFilterResult;
    };

    struct AggregateFilterResult  : public MonitoringFilterResult
    {
         OpcUa::DateTime RevisedStartTime;
         double RevisedProcessingInterval;
         OpcUa::AggregateConfiguration RevisedAggregateConfiguration;
    };

    struct MonitoringParameters  : public ExtensionObject
    {
         uint32_t ClientHandle;
         double SamplingInterval;
         OpcUa::ExtensionObject Filter;
         uint32_t QueueSize;
         bool DiscardOldest;
    };

    struct MonitoredItemCreateParameters 
    {
         OpcUa::MonitoringMode MonitoringMode;
         OpcUa::MonitoringParameters RequestedParameters;
    };

    struct MonitoredItemCreateRequest  : public ExtensionObject
    {
         OpcUa::ReadValueId ItemToMonitor;
         OpcUa::MonitoredItemCreateParameters Parameters;

         MonitoredItemCreateRequest();
    };

    struct MonitoredItemCreateResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         uint32_t MonitoredItemId;
         double RevisedSamplingInterval;
         uint32_t RevisedQueueSize;
         OpcUa::ExtensionObject FilterResult;
    };

    struct CreateMonitoredItemsParameters 
    {
         uint32_t SubscriptionId;
         OpcUa::TimestampsToReturn TimestampsToReturn;
         std::vector<OpcUa::MonitoredItemCreateRequest> ItemsToCreate;
    };

    struct CreateMonitoredItemsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::CreateMonitoredItemsParameters Parameters;

         CreateMonitoredItemsRequest();
    };

    struct CreateMonitoredItemsResult 
    {
         std::vector<OpcUa::MonitoredItemCreateResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct CreateMonitoredItemsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::CreateMonitoredItemsResult Parameters;

         CreateMonitoredItemsResponse();
    };

    struct MonitoredItemModifyParameters 
    {
         OpcUa::MonitoringParameters RequestedParameters;
    };

    struct MonitoredItemModifyRequest  : public ExtensionObject
    {
         uint32_t MonitoredItemId;
         OpcUa::MonitoredItemModifyParameters Parameters;

         MonitoredItemModifyRequest();
    };

    struct MonitoredItemModifyResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         double RevisedSamplingInterval;
         uint32_t RevisedQueueSize;
         OpcUa::ExtensionObject FilterResult;
    };

    struct ModifyMonitoredItemsParameters 
    {
         uint32_t SubscriptionId;
         OpcUa::TimestampsToReturn TimestampsToReturn;
         std::vector<OpcUa::MonitoredItemModifyRequest> ItemsToModify;
    };

    struct ModifyMonitoredItemsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::ModifyMonitoredItemsParameters Parameters;

         ModifyMonitoredItemsRequest();
    };

    struct ModifyMonitoredItemsResult 
    {
         std::vector<OpcUa::MonitoredItemModifyResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct ModifyMonitoredItemsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::ModifyMonitoredItemsResult Parameters;

         ModifyMonitoredItemsResponse();
    };

    struct SetMonitoringModeParameters 
    {
         uint32_t SubscriptionId;
         OpcUa::MonitoringMode MonitoringMode;
         std::vector<uint32_t> MonitoredItemIds;
    };

    struct SetMonitoringModeRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::SetMonitoringModeParameters Parameters;

         SetMonitoringModeRequest();
    };

    struct SetMonitoringModeResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct SetMonitoringModeResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::SetMonitoringModeResult Parameters;

         SetMonitoringModeResponse();
    };

    struct SetTriggeringParameters 
    {
         uint32_t SubscriptionId;
         uint32_t TriggeringItemId;
         std::vector<uint32_t> LinksToAdd;
         std::vector<uint32_t> LinksToRemove;
    };

    struct SetTriggeringRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::SetTriggeringParameters Parameters;

         SetTriggeringRequest();
    };

    struct SetTriggeringResult 
    {
         std::vector<OpcUa::StatusCode> AddResults;
         std::vector<OpcUa::DiagnosticInfo> AddDiagnosticInfos;
         std::vector<OpcUa::StatusCode> RemoveResults;
         std::vector<OpcUa::DiagnosticInfo> RemoveDiagnosticInfos;
    };

    struct SetTriggeringResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::SetTriggeringResult Parameters;

         SetTriggeringResponse();
    };

    struct DeleteMonitoredItemsParameters 
    {
         uint32_t SubscriptionId;
         std::vector<uint32_t> MonitoredItemIds;
    };

    struct DeleteMonitoredItemsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::DeleteMonitoredItemsParameters Parameters;

         DeleteMonitoredItemsRequest();
    };

    struct DeleteMonitoredItemsResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct DeleteMonitoredItemsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::DeleteMonitoredItemsResult Parameters;

         DeleteMonitoredItemsResponse();
    };

    struct CreateSubscriptionParameters 
    {
         double RequestedPublishingInterval;
         uint32_t RequestedLifetimeCount;
         uint32_t RequestedMaxKeepAliveCount;
         uint32_t MaxNotificationsPerPublish;
         bool PublishingEnabled;
         uint8_t Priority;

         CreateSubscriptionParameters();
    };

    struct CreateSubscriptionRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::CreateSubscriptionParameters Parameters;

         CreateSubscriptionRequest();
    };

    struct CreateSubscriptionResult 
    {
         uint32_t SubscriptionId;
         double RevisedPublishingInterval;
         uint32_t RevisedLifetimeCount;
         uint32_t RevisedMaxKeepAliveCount;
    };

    struct CreateSubscriptionResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::CreateSubscriptionResult Parameters;

         CreateSubscriptionResponse();
    };

    struct ModifySubscriptionParameters 
    {
         uint32_t SubscriptionId;
         double RequestedPublishingInterval;
         uint32_t RequestedLifetimeCount;
         uint32_t RequestedMaxKeepAliveCount;
         uint32_t MaxNotificationsPerPublish;
         uint8_t Priority;
    };

    struct ModifySubscriptionRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::ModifySubscriptionParameters Parameters;

         ModifySubscriptionRequest();
    };

    struct ModifySubscriptionResult 
    {
         double RevisedPublishingInterval;
         uint32_t RevisedLifetimeCount;
         uint32_t RevisedMaxKeepAliveCount;
    };

    struct ModifySubscriptionResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::ModifySubscriptionResult Parameters;

         ModifySubscriptionResponse();
    };

    struct SetPublishingModeParameters 
    {
         bool PublishingEnabled;
         std::vector<uint32_t> SubscriptionIds;

         SetPublishingModeParameters();
    };

    struct SetPublishingModeRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::SetPublishingModeParameters Parameters;

         SetPublishingModeRequest();
    };

    struct SetPublishingModeResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct SetPublishingModeResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::SetPublishingModeResult Parameters;

         SetPublishingModeResponse();
    };

    struct NotificationMessage  : public ExtensionObject
    {
         uint32_t SequenceNumber;
         OpcUa::DateTime PublishTime;
         std::vector<OpcUa::ExtensionObject> NotificationData;

         NotificationMessage();
    };

    struct NotificationData  : public ExtensionObject
    {
    };

    struct MonitoredItemNotification  : public ExtensionObject
    {
         uint32_t ClientHandle;
         OpcUa::DataValue Value;
    };

    struct DataChangeNotification  : public NotificationData
    {
         std::vector<OpcUa::MonitoredItemNotification> MonitoredItems;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct EventFieldList  : public ExtensionObject
    {
         uint32_t ClientHandle;
         std::vector<OpcUa::Variant> EventFields;
    };

    struct EventNotificationList  : public NotificationData
    {
         std::vector<OpcUa::EventFieldList> Events;
    };

    struct HistoryEventFieldList  : public ExtensionObject
    {
         std::vector<OpcUa::Variant> EventFields;
    };

    struct HistoryEvent  : public ExtensionObject
    {
         std::vector<OpcUa::HistoryEventFieldList> Events;
    };

    struct UpdateEventDetails  : public HistoryUpdateDetails
    {
         OpcUa::PerformUpdateType PerformInsertReplace;
         OpcUa::EventFilter Filter;
         std::vector<OpcUa::HistoryEventFieldList> EventData;
    };

    struct StatusChangeNotification  : public NotificationData
    {
         OpcUa::StatusCode Status;
         OpcUa::DiagnosticInfo DiagnosticInfo;
    };

    struct SubscriptionAcknowledgement  : public ExtensionObject
    {
         uint32_t SubscriptionId;
         uint32_t SequenceNumber;
    };

    struct PublishParameters 
    {
         std::vector<OpcUa::SubscriptionAcknowledgement> SubscriptionAcknowledgements;
    };

    struct PublishRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::PublishParameters Parameters;

         PublishRequest();
    };

    struct PublishResult 
    {
         uint32_t SubscriptionId;
         std::vector<uint32_t> AvailableSequenceNumbers;
         bool MoreNotifications;
         OpcUa::NotificationMessage NotificationMessage;
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         PublishResult();
    };

    struct PublishResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::PublishResult Parameters;

         PublishResponse();
    };

    struct RepublishParameters 
    {
         uint32_t SubscriptionId;
         uint32_t RetransmitSequenceNumber;
    };

    struct RepublishRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::RepublishParameters Parameters;

         RepublishRequest();
    };

    struct RepublishResult 
    {
         OpcUa::NotificationMessage NotificationMessage;
    };

    struct RepublishResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::RepublishResult Parameters;

         RepublishResponse();
    };

    struct TransferResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         std::vector<uint32_t> AvailableSequenceNumbers;
    };

    struct TransferSubscriptionsParameters 
    {
         std::vector<uint32_t> SubscriptionIds;
         bool SendInitialValues;
    };

    struct TransferSubscriptionsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::TransferSubscriptionsParameters Parameters;

         TransferSubscriptionsRequest();
    };

    struct TransferSubscriptionsResult 
    {
         std::vector<OpcUa::TransferResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct TransferSubscriptionsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::TransferSubscriptionsResult Parameters;

         TransferSubscriptionsResponse();
    };

    struct DeleteSubscriptionsParameters 
    {
         std::vector<uint32_t> SubscriptionIds;
    };

    struct DeleteSubscriptionsRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::DeleteSubscriptionsParameters Parameters;

         DeleteSubscriptionsRequest();
    };

    struct DeleteSubscriptionsResult 
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };

    struct DeleteSubscriptionsResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::DeleteSubscriptionsResult Parameters;

         DeleteSubscriptionsResponse();
    };

    // A complex type containing all possible scalar types used for testing.
    struct ScalarTestType  : public ExtensionObject
    {
         bool Boolean;
         char SByte;
         uint8_t Byte;
         int16_t Int16;
         uint16_t UInt16;
         int32_t Int32;
         uint32_t UInt32;
         int64_t Int64;
         uint64_t UInt64;
         float Float;
         double Double;
         std::string String;
         OpcUa::DateTime DateTime;
         OpcUa::Guid Guid;
         OpcUa::ByteString ByteString;
         OpcUa::XmlElement XmlElement;
         OpcUa::NodeId NodeId;
         OpcUa::ExpandedNodeId ExpandedNodeId;
         OpcUa::StatusCode Status;
         OpcUa::DiagnosticInfo DiagnosticInfo;
         OpcUa::QualifiedName QualifiedName;
         OpcUa::LocalizedText LocalizedText;
         OpcUa::ExtensionObject ExtensionObject;
         OpcUa::DataValue DataValue;
         OpcUa::EnumeratedTestType EnumeratedValue;
    };

    // A complex type containing all possible array types used for testing.
    struct ArrayTestType  : public ExtensionObject
    {
         std::vector<bool> Booleans;
         std::vector<char> SBytes;
         std::vector<int16_t> Int16s;
         std::vector<uint16_t> UInt16s;
         std::vector<int32_t> Int32s;
         std::vector<uint32_t> UInt32s;
         std::vector<int64_t> Int64s;
         std::vector<uint64_t> UInt64s;
         std::vector<float> Floats;
         std::vector<double> Doubles;
         std::vector<std::string> Strings;
         std::vector<OpcUa::DateTime> DateTimes;
         std::vector<OpcUa::Guid> Guids;
         std::vector<OpcUa::ByteString> ByteStrings;
         std::vector<OpcUa::XmlElement> XmlElements;
         std::vector<OpcUa::NodeId> NodeIds;
         std::vector<OpcUa::ExpandedNodeId> ExpandedNodeIds;
         std::vector<OpcUa::StatusCode> StatusCodes;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
         std::vector<OpcUa::QualifiedName> QualifiedNames;
         std::vector<OpcUa::LocalizedText> LocalizedTexts;
         std::vector<OpcUa::ExtensionObject> ExtensionObjects;
         std::vector<OpcUa::DataValue> DataValues;
         std::vector<OpcUa::Variant> Variants;
         std::vector<OpcUa::EnumeratedTestType> EnumeratedValues;
    };

    struct CompositeTestType  : public ExtensionObject
    {
         OpcUa::ScalarTestType Field1;
         OpcUa::ArrayTestType Field2;
    };

    struct TestStackParameters 
    {
         uint32_t TestId;
         int32_t Iteration;
         OpcUa::Variant Input;
    };

    struct TestStackRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::TestStackParameters Parameters;

         TestStackRequest();
    };

    struct TestStackResult 
    {
         OpcUa::Variant Output;
    };

    struct TestStackResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::TestStackResult Parameters;

         TestStackResponse();
    };

    struct TestStackExParameters 
    {
         uint32_t TestId;
         int32_t Iteration;
         OpcUa::CompositeTestType Input;
    };

    struct TestStackExRequest  : public ExtensionObject
    {
         OpcUa::RequestHeader Header;
         OpcUa::TestStackExParameters Parameters;

         TestStackExRequest();
    };

    struct TestStackExResult 
    {
         OpcUa::CompositeTestType Output;
    };

    struct TestStackExResponse  : public ExtensionObject
    {
         OpcUa::ResponseHeader Header;
         OpcUa::TestStackExResult Parameters;

         TestStackExResponse();
    };

    struct BuildInfo  : public ExtensionObject
    {
         std::string ProductUri;
         std::string ManufacturerName;
         std::string ProductName;
         std::string SoftwareVersion;
         std::string BuildNumber;
         OpcUa::DateTime BuildDate;
    };

    struct RedundantServerDataType  : public ExtensionObject
    {
         std::string ServerId;
         uint8_t ServiceLevel;
         OpcUa::ServerState ServerState;
    };

    struct EndpointUrlListDataType  : public ExtensionObject
    {
         std::vector<std::string> EndpointUrlList;
    };

    struct NetworkGroupDataType  : public ExtensionObject
    {
         std::string ServerUri;
         std::vector<OpcUa::EndpointUrlListDataType> NetworkPaths;
    };

    struct SamplingIntervalDiagnosticsDataType  : public ExtensionObject
    {
         double SamplingInterval;
         uint32_t MonitoredItemCount;
         uint32_t MaxMonitoredItemCount;
         uint32_t DisabledMonitoredItemCount;
    };

    struct ServerDiagnosticsSummaryDataType  : public ExtensionObject
    {
         uint32_t ServerViewCount;
         uint32_t CurrentSessionCount;
         uint32_t CumulatedSessionCount;
         uint32_t SecurityRejectedSessionCount;
         uint32_t RejectedSessionCount;
         uint32_t SessionTimeoutCount;
         uint32_t SessionAbortCount;
         uint32_t CurrentSubscriptionCount;
         uint32_t CumulatedSubscriptionCount;
         uint32_t PublishingIntervalCount;
         uint32_t SecurityRejectedRequestsCount;
         uint32_t RejectedRequestsCount;
    };

    struct ServerStatusDataType  : public ExtensionObject
    {
         OpcUa::DateTime StartTime;
         OpcUa::DateTime CurrentTime;
         OpcUa::ServerState State;
         OpcUa::BuildInfo BuildInfo;
         uint32_t SecondsTillShutdown;
         OpcUa::LocalizedText ShutdownReason;
    };

    struct SessionSecurityDiagnosticsDataType  : public ExtensionObject
    {
         OpcUa::NodeId SessionId;
         std::string ClientUserIdOfSession;
         std::vector<std::string> ClientUserIdHistory;
         std::string AuthenticationMechanism;
         std::string TransportProtocol;
         OpcUa::MessageSecurityMode SecurityMode;
         std::string SecurityPolicyUri;
         OpcUa::ByteString ClientCertificate;
    };

    struct ServiceCounterDataType  : public ExtensionObject
    {
         uint32_t TotalCount;
         uint32_t ErrorCount;
    };

    struct SessionDiagnosticsDataType  : public ExtensionObject
    {
         OpcUa::NodeId SessionId;
         std::string SessionName;
         OpcUa::ApplicationDescription ClientDescription;
         std::string ServerUri;
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         double ActualSessionTimeout;
         uint32_t MaxResponseMessageSize;
         OpcUa::DateTime ClientConnectionTime;
         OpcUa::DateTime ClientLastContactTime;
         uint32_t CurrentSubscriptionsCount;
         uint32_t CurrentMonitoredItemsCount;
         uint32_t CurrentPublishRequestsInQueue;
         OpcUa::ServiceCounterDataType TotalRequestCount;
         uint32_t UnauthorizedRequestCount;
         OpcUa::ServiceCounterDataType ReadCount;
         OpcUa::ServiceCounterDataType HistoryReadCount;
         OpcUa::ServiceCounterDataType WriteCount;
         OpcUa::ServiceCounterDataType HistoryUpdateCount;
         OpcUa::ServiceCounterDataType CallCount;
         OpcUa::ServiceCounterDataType CreateMonitoredItemsCount;
         OpcUa::ServiceCounterDataType ModifyMonitoredItemsCount;
         OpcUa::ServiceCounterDataType SetMonitoringModeCount;
         OpcUa::ServiceCounterDataType SetTriggeringCount;
         OpcUa::ServiceCounterDataType DeleteMonitoredItemsCount;
         OpcUa::ServiceCounterDataType CreateSubscriptionCount;
         OpcUa::ServiceCounterDataType ModifySubscriptionCount;
         OpcUa::ServiceCounterDataType SetPublishingModeCount;
         OpcUa::ServiceCounterDataType PublishCount;
         OpcUa::ServiceCounterDataType RepublishCount;
         OpcUa::ServiceCounterDataType TransferSubscriptionsCount;
         OpcUa::ServiceCounterDataType DeleteSubscriptionsCount;
         OpcUa::ServiceCounterDataType AddNodesCount;
         OpcUa::ServiceCounterDataType AddReferencesCount;
         OpcUa::ServiceCounterDataType DeleteNodesCount;
         OpcUa::ServiceCounterDataType DeleteReferencesCount;
         OpcUa::ServiceCounterDataType BrowseCount;
         OpcUa::ServiceCounterDataType BrowseNextCount;
         OpcUa::ServiceCounterDataType TranslateBrowsePathsToNodeIdsCount;
         OpcUa::ServiceCounterDataType QueryFirstCount;
         OpcUa::ServiceCounterDataType QueryNextCount;
         OpcUa::ServiceCounterDataType RegisterNodesCount;
         OpcUa::ServiceCounterDataType UnregisterNodesCount;
    };

    struct StatusResult  : public ExtensionObject
    {
         OpcUa::StatusCode Status;
         OpcUa::DiagnosticInfo DiagnosticInfo;
    };

    struct SubscriptionDiagnosticsDataType  : public ExtensionObject
    {
         OpcUa::NodeId SessionId;
         uint32_t SubscriptionId;
         uint8_t Priority;
         double PublishingInterval;
         uint32_t MaxKeepAliveCount;
         uint32_t MaxLifetimeCount;
         uint32_t MaxNotificationsPerPublish;
         bool PublishingEnabled;
         uint32_t ModifyCount;
         uint32_t EnableCount;
         uint32_t DisableCount;
         uint32_t RepublishRequestCount;
         uint32_t RepublishMessageRequestCount;
         uint32_t RepublishMessageCount;
         uint32_t TransferRequestCount;
         uint32_t TransferredToAltClientCount;
         uint32_t TransferredToSameClientCount;
         uint32_t PublishRequestCount;
         uint32_t DataChangeNotificationsCount;
         uint32_t EventNotificationsCount;
         uint32_t NotificationsCount;
         uint32_t LatePublishRequestCount;
         uint32_t CurrentKeepAliveCount;
         uint32_t CurrentLifetimeCount;
         uint32_t UnacknowledgedMessageCount;
         uint32_t DiscardedMessageCount;
         uint32_t MonitoredItemCount;
         uint32_t DisabledMonitoredItemCount;
         uint32_t MonitoringQueueOverflowCount;
         uint32_t NextSequenceNumber;
         uint32_t EventQueueOverFlowCount;
    };

    struct ModelChangeStructureDataType  : public ExtensionObject
    {
         OpcUa::NodeId Affected;
         OpcUa::NodeId AffectedType;
         uint8_t Verb;
    };

    struct SemanticChangeStructureDataType  : public ExtensionObject
    {
         OpcUa::NodeId Affected;
         OpcUa::NodeId AffectedType;
    };

    struct Range  : public ExtensionObject
    {
         double Low;
         double High;
    };

    struct EUInformation  : public ExtensionObject
    {
         std::string NamespaceUri;
         int32_t UnitId;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
    };

    struct ComplexNumberType  : public ExtensionObject
    {
         float Real;
         float Imaginary;
    };

    struct DoubleComplexNumberType  : public ExtensionObject
    {
         double Real;
         double Imaginary;
    };

    struct AxisInformation  : public ExtensionObject
    {
         OpcUa::EUInformation EngineeringUnits;
         OpcUa::Range EURange;
         OpcUa::LocalizedText Title;
         OpcUa::AxisScaleEnumeration AxisScaleType;
         std::vector<double> AxisSteps;
    };

    struct XVType  : public ExtensionObject
    {
         double X;
         float Value;
    };

    struct ProgramDiagnosticDataType  : public ExtensionObject
    {
         OpcUa::NodeId CreateSessionId;
         std::string CreateClientName;
         OpcUa::DateTime InvocationCreationTime;
         OpcUa::DateTime LastTransitionTime;
         std::string LastMethodCall;
         OpcUa::NodeId LastMethodSessionId;
         std::vector<OpcUa::Argument> LastMethodInputArguments;
         std::vector<OpcUa::Argument> LastMethodOutputArguments;
         OpcUa::DateTime LastMethodCallTime;
         OpcUa::StatusResult LastMethodReturnStatus;
    };

    struct Annotation  : public ExtensionObject
    {
         std::string Message;
         std::string UserName;
         OpcUa::DateTime AnnotationTime;
    };

} // namespace
    
