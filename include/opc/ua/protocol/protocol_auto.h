
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

/// @brief Opc Ua Binary.
/// @license GNU LGPL
///
/// Distributed under the GNU LGPL License
/// (See accompanying file LICENSE or copy at
/// http://www.gnu.org/licenses/lgpl.html)
///

#pragma once

#include <opc/ua/protocol/attribute_ids.h>
#include <opc/ua/protocol/data_value.h>
#include <opc/ua/protocol/types.h>
#include <opc/ua/protocol/datetime.h>
#include <opc/ua/protocol/status_codes.h>
#include <opc/ua/protocol/nodeid.h>
#include <opc/ua/protocol/variant.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>

namespace OpcUa
{
    

    // XmlElement
    struct XmlElement 
    {
         int32_t Length;
         std::vector<char> Value;
    };


    // The possible encodings for a NodeId value.
    enum NodeIdType : uint8_t
    {
         TwoByte = 0,
         FourByte = 1,
         Numeric = 2,
         String = 3,
         Guid = 4,
         ByteString = 5,
    };

    // DiagnosticInfo
    struct DiagnosticInfo 
    {
         uint8_t Encoding;
         int32_t SymbolicId;
         int32_t NamespaceURI;
         int32_t LocalizedText;
         std::string AdditionalInfo;
         StatusCode InnerStatusCode;
         DiagnosticInfo InnerDiagnosticInfo;
    };

    // ExtensionObject
    struct ExtensionObject 
    {
         uint8_t Encoding;
         ExpandedNodeId TypeId;
         int32_t BodyLength;
         std::vector<uint8_t> Body;
    };


    enum OpenFileMode : uint32_t
    {
         Read = 1,
         Write = 2,
         EraseExisiting = 4,
         Append = 8,
    };


    // A mask specifying the class of the node.
    enum NodeClass : uint32_t
    {
         Unspecified = 0,
         Object = 1,
         Variable = 2,
         Method = 4,
         ObjectType = 8,
         VariableType = 16,
         ReferenceType = 32,
         DataType = 64,
         View = 128,
    };

    // ua:ExtensionObject
    struct Argument 
    {
         std::string Name;
         NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         LocalizedText Description;
    };

    // ua:ExtensionObject
    struct EnumValueType 
    {
         int64_t Value;
         LocalizedText DisplayName;
         LocalizedText Description;
    };

    struct TimeZoneDataType 
    {
         int16_t Offset;
         bool DaylightSavingInOffset;
    };


    // The types of applications.
    enum ApplicationType : uint32_t
    {
         Server = 0,
         Client = 1,
         ClientAndServer = 2,
         DiscoveryServer = 3,
    };

    // ua:ExtensionObject
    struct ApplicationDescription 
    {
         std::string ApplicationUri;
         std::string ProductUri;
         LocalizedText ApplicationName;
         ApplicationType ApplicationType;
         std::string GatewayServerUri;
         std::string DiscoveryProfileUri;
         std::vector<std::string> DiscoveryUrls;
    };

    // ua:ExtensionObject
    struct RequestHeader 
    {
         NodeId AuthenticationToken;
         DateTime Timestamp;
         uint32_t RequestHandle;
         uint32_t ReturnDiagnostics;
         std::string AuditEntryId;
         uint32_t TimeoutHint;
         ExtensionObject AdditionalHeader;
    };

    // ua:ExtensionObject
    struct ResponseHeader 
    {
         DateTime Timestamp;
         uint32_t RequestHandle;
         StatusCode ServiceResult;
         DiagnosticInfo ServiceDiagnostics;
         std::vector<std::string> StringTable;
         ExtensionObject AdditionalHeader;
    };

    // ua:ExtensionObject
    struct ServiceFault 
    {
         ResponseHeader ResponseHeader;
    };

    struct FindServersParameters 
    {
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         std::vector<std::string> ServerUris;
    };

    // ua:ExtensionObject
    struct FindServersRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         FindServersParameters Parameters;

         FindServersRequest();
    };

    struct FindServersData 
    {
         std::vector<ApplicationDescription> Servers;
    };

    // ua:ExtensionObject
    struct FindServersResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         FindServersData Parameters;

         FindServersResponse();
    };


    // The type of security to use on a message.
    enum MessageSecurityMode : uint32_t
    {
         Invalid = 0,
         None = 1,
         Sign = 2,
         SignAndEncrypt = 3,
    };


    // The possible user token types.
    enum UserTokenType : uint32_t
    {
         Anonymous = 0,
         UserName = 1,
         Certificate = 2,
         IssuedToken = 3,
    };

    // ua:ExtensionObject
    struct UserTokenPolicy 
    {
         std::string PolicyId;
         UserTokenType TokenType;
         std::string IssuedTokenType;
         std::string IssuerEndpointUrl;
         std::string SecurityPolicyUri;
    };

    // ua:ExtensionObject
    struct EndpointDescription 
    {
         std::string EndpointUrl;
         ApplicationDescription Server;
         ByteString ServerCertificate;
         MessageSecurityMode SecurityMode;
         std::string SecurityPolicyUri;
         std::vector<UserTokenPolicy> UserIdentityTokens;
         std::string TransportProfileUri;
         uint8_t SecurityLevel;
    };

    struct GetEndpointsParameters 
    {
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         std::vector<std::string> ProfileUris;
    };

    // ua:ExtensionObject
    struct GetEndpointsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         GetEndpointsParameters Parameters;

         GetEndpointsRequest();
    };

    // ua:ExtensionObject
    struct GetEndpointsResponse 
    {
         ResponseHeader ResponseHeader;
         std::vector<EndpointDescription> Endpoints;

         GetEndpointsResponse();
    };

    // ua:ExtensionObject
    struct RegisteredServer 
    {
         std::string ServerUri;
         std::string ProductUri;
         std::vector<LocalizedText> ServerNames;
         ApplicationType ServerType;
         std::string GatewayServerUri;
         std::vector<std::string> DiscoveryUrls;
         std::string SemaphoreFilePath;
         bool IsOnline;
    };

    struct RegisterServerParameters 
    {
         RegisteredServer Server;
    };

    // ua:ExtensionObject
    struct RegisterServerRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         RegisterServerParameters Parameters;

         RegisterServerRequest();
    };

    struct RegisterServerData 
    {
    };

    // ua:ExtensionObject
    struct RegisterServerResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         RegisterServerData Parameters;

         RegisterServerResponse();
    };


    // Indicates whether a token if being created or renewed.
    enum SecurityTokenRequestType : uint32_t
    {
         Issue = 0,
         Renew = 1,
    };

    // ua:ExtensionObject
    struct ChannelSecurityToken 
    {
         uint32_t ChannelId;
         uint32_t TokenId;
         DateTime CreatedAt;
         uint32_t RevisedLifetime;
    };

    struct OpenSecureChannelParameters 
    {
         uint32_t ClientProtocolVersion;
         SecurityTokenRequestType RequestType;
         MessageSecurityMode SecurityMode;
         ByteString ClientNonce;
         uint32_t RequestedLifetime;
    };

    // ua:ExtensionObject
    struct OpenSecureChannelRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         OpenSecureChannelParameters Parameters;

         OpenSecureChannelRequest();
    };

    struct OpenSecureChannelData 
    {
         uint32_t ServerProtocolVersion;
         ChannelSecurityToken SecurityToken;
         ByteString ServerNonce;
    };

    // ua:ExtensionObject
    struct OpenSecureChannelResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         OpenSecureChannelData Parameters;

         OpenSecureChannelResponse();
    };

    struct CloseSecureChannelParameters 
    {
    };

    // ua:ExtensionObject
    struct CloseSecureChannelRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CloseSecureChannelParameters Parameters;

         CloseSecureChannelRequest();
    };

    struct CloseSecureChannelData 
    {
    };

    // ua:ExtensionObject
    struct CloseSecureChannelResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CloseSecureChannelData Parameters;

         CloseSecureChannelResponse();
    };

    // ua:ExtensionObject
    struct SignedSoftwareCertificate 
    {
         ByteString CertificateData;
         ByteString Signature;
    };

    // ua:ExtensionObject
    struct SignatureData 
    {
         std::string Algorithm;
         ByteString Signature;
    };

    struct CreateSessionParameters 
    {
         ApplicationDescription ClientDescription;
         std::string ServerUri;
         std::string EndpointUrl;
         std::string SessionName;
         ByteString ClientNonce;
         ByteString ClientCertificate;
         double RequestedSessionTimeout;
         uint32_t MaxResponseMessageSize;
    };

    // ua:ExtensionObject
    struct CreateSessionRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CreateSessionParameters Parameters;

         CreateSessionRequest();
    };

    struct CreateSessionData 
    {
         NodeId SessionId;
         NodeId AuthenticationToken;
         double RevisedSessionTimeout;
         ByteString ServerNonce;
         ByteString ServerCertificate;
         std::vector<EndpointDescription> ServerEndpoints;
         std::vector<SignedSoftwareCertificate> ServerSoftwareCertificates;
         SignatureData ServerSignature;
         uint32_t MaxRequestMessageSize;
    };

    // ua:ExtensionObject
    struct CreateSessionResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CreateSessionData Parameters;

         CreateSessionResponse();
    };

    // ua:ExtensionObject
    struct UserIdentityToken 
    {
         std::string PolicyId;
    };

    // tns:UserIdentityToken
    struct AnonymousIdentityToken 
    {
         std::string PolicyId;
    };

    // tns:UserIdentityToken
    struct UserNameIdentityToken 
    {
         std::string PolicyId;
         std::string UserName;
         ByteString Password;
         std::string EncryptionAlgorithm;
    };

    // tns:UserIdentityToken
    struct X509IdentityToken 
    {
         std::string PolicyId;
         ByteString CertificateData;
    };

    // tns:UserIdentityToken
    struct IssuedIdentityToken 
    {
         std::string PolicyId;
         ByteString TokenData;
         std::string EncryptionAlgorithm;
    };

    struct ActivateSessionParameters 
    {
         SignatureData ClientSignature;
         std::vector<SignedSoftwareCertificate> ClientSoftwareCertificates;
         std::vector<std::string> LocaleIds;
         ExtensionObject UserIdentityToken;
         SignatureData UserTokenSignature;
    };

    // ua:ExtensionObject
    struct ActivateSessionRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         ActivateSessionParameters Parameters;

         ActivateSessionRequest();
    };

    struct ActivateSessionData 
    {
         ByteString ServerNonce;
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct ActivateSessionResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         ActivateSessionData Parameters;

         ActivateSessionResponse();
    };

    struct CloseSessionParameters 
    {
         bool DeleteSubscriptions;
    };

    // ua:ExtensionObject
    struct CloseSessionRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CloseSessionParameters Parameters;

         CloseSessionRequest();
    };

    struct CloseSessionData 
    {
    };

    // ua:ExtensionObject
    struct CloseSessionResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CloseSessionData Parameters;

         CloseSessionResponse();
    };

    struct CancelParameters 
    {
         uint32_t RequestHandle;
    };

    // ua:ExtensionObject
    struct CancelRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CancelParameters Parameters;

         CancelRequest();
    };

    struct CancelData 
    {
         uint32_t CancelCount;
    };

    // ua:ExtensionObject
    struct CancelResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CancelData Parameters;

         CancelResponse();
    };


    // The bits used to specify default attributes for a new node.
    enum NodeAttributesMask : uint32_t
    {
         None = 0,
         AccessLevel = 1,
         ArrayDimensions = 2,
         BrowseName = 4,
         ContainsNoLoops = 8,
         DataType = 16,
         Description = 32,
         DisplayName = 64,
         EventNotifier = 128,
         Executable = 256,
         Historizing = 512,
         InverseName = 1024,
         IsAbstract = 2048,
         MinimumSamplingInterval = 4096,
         NodeClass = 8192,
         NodeId = 16384,
         Symmetric = 32768,
         UserAccessLevel = 65536,
         UserExecutable = 131072,
         UserWriteMask = 262144,
         ValueRank = 524288,
         WriteMask = 1048576,
         Value = 2097152,
         All = 4194303,
         BaseNode = 1335396,
         Object = 1335524,
         ObjectTypeOrDataType = 1337444,
         Variable = 4026999,
         VariableType = 3958902,
         Method = 1466724,
         ReferenceType = 1371236,
         View = 1335532,
    };

    // ua:ExtensionObject
    struct NodeAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
    };

    // tns:NodeAttributes
    struct ObjectAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         uint8_t EventNotifier;
    };

    // tns:NodeAttributes
    struct VariableAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         Variant Value;
         NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         uint8_t AccessLevel;
         uint8_t UserAccessLevel;
         double MinimumSamplingInterval;
         bool Historizing;
    };

    // tns:NodeAttributes
    struct MethodAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool Executable;
         bool UserExecutable;
    };

    // tns:NodeAttributes
    struct ObjectTypeAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool IsAbstract;
    };

    // tns:NodeAttributes
    struct VariableTypeAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         Variant Value;
         NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         bool IsAbstract;
    };

    // tns:NodeAttributes
    struct ReferenceTypeAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool IsAbstract;
         bool Symmetric;
         LocalizedText InverseName;
    };

    // tns:NodeAttributes
    struct DataTypeAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool IsAbstract;
    };

    // tns:NodeAttributes
    struct ViewAttributes 
    {
         uint32_t SpecifiedAttributes;
         LocalizedText DisplayName;
         LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool ContainsNoLoops;
         uint8_t EventNotifier;
    };

    // ua:ExtensionObject
    struct AddNodesItem 
    {
         ExpandedNodeId ParentNodeId;
         NodeId ReferenceTypeId;
         ExpandedNodeId RequestedNewNodeId;
         QualifiedName BrowseName;
         NodeClass NodeClass;
         ExtensionObject NodeAttributes;
         ExpandedNodeId TypeDefinition;
    };

    // ua:ExtensionObject
    struct AddNodesResult 
    {
         StatusCode StatusCode;
         NodeId AddedNodeId;
    };

    struct AddNodesParameters 
    {
         std::vector<AddNodesItem> NodesToAdd;
    };

    // ua:ExtensionObject
    struct AddNodesRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         AddNodesParameters Parameters;

         AddNodesRequest();
    };

    struct AddNodesData 
    {
         std::vector<AddNodesResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct AddNodesResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         AddNodesData Parameters;

         AddNodesResponse();
    };

    // ua:ExtensionObject
    struct AddReferencesItem 
    {
         NodeId SourceNodeId;
         NodeId ReferenceTypeId;
         bool IsForward;
         std::string TargetServerUri;
         ExpandedNodeId TargetNodeId;
         NodeClass TargetNodeClass;
    };

    struct AddReferencesParameters 
    {
         std::vector<AddReferencesItem> ReferencesToAdd;
    };

    // ua:ExtensionObject
    struct AddReferencesRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         AddReferencesParameters Parameters;

         AddReferencesRequest();
    };

    struct AddReferencesData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct AddReferencesResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         AddReferencesData Parameters;

         AddReferencesResponse();
    };

    // ua:ExtensionObject
    struct DeleteNodesItem 
    {
         NodeId NodeId;
         bool DeleteTargetReferences;
    };

    struct DeleteNodesParameters 
    {
         std::vector<DeleteNodesItem> NodesToDelete;
    };

    // ua:ExtensionObject
    struct DeleteNodesRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         DeleteNodesParameters Parameters;

         DeleteNodesRequest();
    };

    struct DeleteNodesData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct DeleteNodesResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         DeleteNodesData Parameters;

         DeleteNodesResponse();
    };

    // ua:ExtensionObject
    struct DeleteReferencesItem 
    {
         NodeId SourceNodeId;
         NodeId ReferenceTypeId;
         bool IsForward;
         ExpandedNodeId TargetNodeId;
         bool DeleteBidirectional;
    };

    struct DeleteReferencesParameters 
    {
         std::vector<DeleteReferencesItem> ReferencesToDelete;
    };

    // ua:ExtensionObject
    struct DeleteReferencesRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         DeleteReferencesParameters Parameters;

         DeleteReferencesRequest();
    };

    struct DeleteReferencesData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct DeleteReferencesResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         DeleteReferencesData Parameters;

         DeleteReferencesResponse();
    };


    // Define bits used to indicate which attributes are writeable.
    enum AttributeWriteMask : uint32_t
    {
         None = 0,
         AccessLevel = 1,
         ArrayDimensions = 2,
         BrowseName = 4,
         ContainsNoLoops = 8,
         DataType = 16,
         Description = 32,
         DisplayName = 64,
         EventNotifier = 128,
         Executable = 256,
         Historizing = 512,
         InverseName = 1024,
         IsAbstract = 2048,
         MinimumSamplingInterval = 4096,
         NodeClass = 8192,
         NodeId = 16384,
         Symmetric = 32768,
         UserAccessLevel = 65536,
         UserExecutable = 131072,
         UserWriteMask = 262144,
         ValueRank = 524288,
         WriteMask = 1048576,
         ValueForVariableType = 2097152,
    };


    // The directions of the references to return.
    enum BrowseDirection : uint32_t
    {
         Forward = 0,
         Inverse = 1,
         Both = 2,
    };

    // ua:ExtensionObject
    struct ViewDescription 
    {
         NodeId ViewId;
         DateTime Timestamp;
         uint32_t ViewVersion;
    };

    // ua:ExtensionObject
    struct BrowseDescription 
    {
         NodeId NodeId;
         BrowseDirection BrowseDirection;
         NodeId ReferenceTypeId;
         bool IncludeSubtypes;
         uint32_t NodeClassMask;
         uint32_t ResultMask;
    };


    // A bit mask which specifies what should be returned in a browse response.
    enum BrowseResultMask : uint32_t
    {
         None = 0,
         ReferenceTypeId = 1,
         IsForward = 2,
         NodeClass = 4,
         BrowseName = 8,
         DisplayName = 16,
         TypeDefinition = 32,
         All = 63,
         ReferenceTypeInfo = 3,
         TargetInfo = 60,
    };

    // ua:ExtensionObject
    struct ReferenceDescription 
    {
         NodeId ReferenceTypeId;
         bool IsForward;
         ExpandedNodeId NodeId;
         QualifiedName BrowseName;
         LocalizedText DisplayName;
         NodeClass NodeClass;
         ExpandedNodeId TypeDefinition;
    };

    // ua:ExtensionObject
    struct BrowseResult 
    {
         StatusCode StatusCode;
         ByteString ContinuationPoint;
         std::vector<ReferenceDescription> References;
    };

    struct BrowseParameters 
    {
         ViewDescription View;
         uint32_t RequestedMaxReferencesPerNode;
         std::vector<BrowseDescription> NodesToBrowse;
    };

    // ua:ExtensionObject
    struct BrowseRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         BrowseParameters Parameters;

         BrowseRequest();
    };

    struct BrowseData 
    {
         std::vector<BrowseResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct BrowseResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         BrowseData Parameters;

         BrowseResponse();
    };

    struct BrowseNextParameters 
    {
         bool ReleaseContinuationPoints;
         std::vector<ByteString> ContinuationPoints;
    };

    // ua:ExtensionObject
    struct BrowseNextRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         BrowseNextParameters Parameters;

         BrowseNextRequest();
    };

    struct BrowseNextData 
    {
         std::vector<BrowseResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct BrowseNextResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         BrowseNextData Parameters;

         BrowseNextResponse();
    };

    // ua:ExtensionObject
    struct RelativePathElement 
    {
         NodeId ReferenceTypeId;
         bool IsInverse;
         bool IncludeSubtypes;
         QualifiedName TargetName;
    };

    // ua:ExtensionObject
    struct RelativePath 
    {
         std::vector<RelativePathElement> Elements;
    };

    // ua:ExtensionObject
    struct BrowsePath 
    {
         NodeId StartingNode;
         RelativePath RelativePath;
    };

    // ua:ExtensionObject
    struct BrowsePathTarget 
    {
         ExpandedNodeId TargetId;
         uint32_t RemainingPathIndex;
    };

    // ua:ExtensionObject
    struct BrowsePathResult 
    {
         StatusCode StatusCode;
         std::vector<BrowsePathTarget> Targets;
    };

    struct TranslateBrowsePathsToNodeIdsParameters 
    {
         std::vector<BrowsePath> BrowsePaths;
    };

    // ua:ExtensionObject
    struct TranslateBrowsePathsToNodeIdsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         TranslateBrowsePathsToNodeIdsParameters Parameters;

         TranslateBrowsePathsToNodeIdsRequest();
    };

    struct TranslateBrowsePathsToNodeIdsData 
    {
         std::vector<BrowsePathResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    // ua:ExtensionObject
    struct TranslateBrowsePathsToNodeIdsResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         TranslateBrowsePathsToNodeIdsData Parameters;

         TranslateBrowsePathsToNodeIdsResponse();
    };

    struct RegisterNodesParameters 
    {
         std::vector<NodeId> NodesToRegister;
    };

    // ua:ExtensionObject
    struct RegisterNodesRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         RegisterNodesParameters Parameters;

         RegisterNodesRequest();
    };

    struct RegisterNodesData 
    {
         std::vector<NodeId> RegisteredNodeIds;
    };

    // ua:ExtensionObject
    struct RegisterNodesResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         RegisterNodesData Parameters;

         RegisterNodesResponse();
    };

    struct UnregisterNodesParameters 
    {
         std::vector<NodeId> NodesToUnregister;
    };

    // ua:ExtensionObject
    struct UnregisterNodesRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         UnregisterNodesParameters Parameters;

         UnregisterNodesRequest();
    };

    struct UnregisterNodesData 
    {
    };

    // ua:ExtensionObject
    struct UnregisterNodesResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         UnregisterNodesData Parameters;

         UnregisterNodesResponse();
    };

    struct EndpointConfiguration 
    {
         int32_t OperationTimeout;
         bool UseBinaryEncoding;
         int32_t MaxStringLength;
         int32_t MaxByteStringLength;
         int32_t MaxArrayLength;
         int32_t MaxMessageSize;
         int32_t MaxBufferSize;
         int32_t ChannelLifetime;
         int32_t SecurityTokenLifetime;
    };


    enum ComplianceLevel : uint32_t
    {
         Untested = 0,
         Partial = 1,
         SelfTested = 2,
         Certified = 3,
    };

    struct SupportedProfile 
    {
         std::string OrganizationUri;
         std::string ProfileId;
         std::string ComplianceTool;
         DateTime ComplianceDate;
         ComplianceLevel ComplianceLevel;
         std::vector<std::string> UnsupportedUnitIds;
    };

    struct SoftwareCertificate 
    {
         std::string ProductName;
         std::string ProductUri;
         std::string VendorName;
         ByteString VendorProductCertificate;
         std::string SoftwareVersion;
         std::string BuildNumber;
         DateTime BuildDate;
         std::string IssuedBy;
         DateTime IssueDate;
         std::vector<SupportedProfile> SupportedProfiles;
    };

    struct QueryDataDescription 
    {
         RelativePath RelativePath;
         uint32_t AttributeId;
         std::string IndexRange;
    };

    struct NodeTypeDescription 
    {
         ExpandedNodeId TypeDefinitionNode;
         bool IncludeSubTypes;
         std::vector<QueryDataDescription> DataToReturn;
    };


    enum FilterOperator : uint32_t
    {
         Equals = 0,
         IsNull = 1,
         GreaterThan = 2,
         LessThan = 3,
         GreaterThanOrEqual = 4,
         LessThanOrEqual = 5,
         Like = 6,
         Not = 7,
         Between = 8,
         InList = 9,
         And = 10,
         Or = 11,
         Cast = 12,
         InView = 13,
         OfType = 14,
         RelatedTo = 15,
         BitwiseAnd = 16,
         BitwiseOr = 17,
    };

    struct QueryDataSet 
    {
         ExpandedNodeId NodeId;
         ExpandedNodeId TypeDefinitionNode;
         std::vector<Variant> Values;
    };

    struct NodeReference 
    {
         NodeId NodeId;
         NodeId ReferenceTypeId;
         bool IsForward;
         std::vector<NodeId> ReferencedNodeIds;
    };

    struct ContentFilterElement 
    {
         FilterOperator FilterOperator;
         std::vector<ExtensionObject> FilterOperands;
    };

    struct ContentFilter 
    {
         std::vector<ContentFilterElement> Elements;
    };

    struct FilterOperand 
    {
    };

    struct ElementOperand 
    {
         uint32_t Index;
    };

    struct LiteralOperand 
    {
         Variant Value;
    };

    struct AttributeOperand 
    {
         NodeId NodeId;
         std::string Alias;
         RelativePath BrowsePath;
         uint32_t AttributeId;
         std::string IndexRange;
    };

    struct SimpleAttributeOperand 
    {
         NodeId TypeDefinitionId;
         std::vector<QualifiedName> BrowsePath;
         uint32_t AttributeId;
         std::string IndexRange;
    };

    struct ContentFilterElementResult 
    {
         StatusCode StatusCode;
         std::vector<StatusCode> OperandStatusCodes;
         std::vector<DiagnosticInfo> OperandDiagnosticInfos;
    };

    struct ContentFilterResult 
    {
         std::vector<ContentFilterElementResult> ElementResults;
         std::vector<DiagnosticInfo> ElementDiagnosticInfos;
    };

    struct ParsingResult 
    {
         StatusCode StatusCode;
         std::vector<StatusCode> DataStatusCodes;
         std::vector<DiagnosticInfo> DataDiagnosticInfos;
    };

    struct QueryFirstParameters 
    {
         ViewDescription View;
         std::vector<NodeTypeDescription> NodeTypes;
         ContentFilter Filter;
         uint32_t MaxDataSetsToReturn;
         uint32_t MaxReferencesToReturn;
    };

    struct QueryFirstRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         QueryFirstParameters Parameters;

         QueryFirstRequest();
    };

    struct QueryFirstData 
    {
         std::vector<QueryDataSet> QueryDataSets;
         ByteString ContinuationPoint;
         std::vector<ParsingResult> ParsingResults;
         std::vector<DiagnosticInfo> DiagnosticInfos;
         ContentFilterResult FilterResult;
    };

    struct QueryFirstResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         QueryFirstData Parameters;

         QueryFirstResponse();
    };

    struct QueryNextParameters 
    {
         bool ReleaseContinuationPoint;
         ByteString ContinuationPoint;
    };

    struct QueryNextRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         QueryNextParameters Parameters;

         QueryNextRequest();
    };

    struct QueryNextData 
    {
         std::vector<QueryDataSet> QueryDataSets;
         ByteString RevisedContinuationPoint;
    };

    struct QueryNextResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         QueryNextData Parameters;

         QueryNextResponse();
    };


    enum TimestampsToReturn : uint32_t
    {
         Source = 0,
         Server = 1,
         Both = 2,
         Neither = 3,
    };

    struct ReadValueId 
    {
         NodeId NodeId;
         uint32_t AttributeId;
         std::string IndexRange;
         QualifiedName DataEncoding;
    };

    struct ReadParameters 
    {
         double MaxAge;
         TimestampsToReturn TimestampsToReturn;
         std::vector<ReadValueId> NodesToRead;
    };

    struct ReadRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         ReadParameters Parameters;

         ReadRequest();
    };

    struct ReadData 
    {
         std::vector<DataValue> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct ReadResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         ReadData Parameters;

         ReadResponse();
    };

    struct HistoryReadValueId 
    {
         NodeId NodeId;
         std::string IndexRange;
         QualifiedName DataEncoding;
         ByteString ContinuationPoint;
    };

    struct HistoryReadResult 
    {
         StatusCode StatusCode;
         ByteString ContinuationPoint;
         ExtensionObject HistoryData;
    };

    struct HistoryReadDetails 
    {
    };

    struct ReadEventDetails 
    {
         uint32_t NumValuesPerNode;
         DateTime StartTime;
         DateTime EndTime;
         EventFilter Filter;
    };

    struct ReadRawModifiedDetails 
    {
         bool IsReadModified;
         DateTime StartTime;
         DateTime EndTime;
         uint32_t NumValuesPerNode;
         bool ReturnBounds;
    };

    struct ReadProcessedDetails 
    {
         DateTime StartTime;
         DateTime EndTime;
         double ProcessingInterval;
         std::vector<NodeId> AggregateType;
         AggregateConfiguration AggregateConfiguration;
    };

    struct ReadAtTimeDetails 
    {
         std::vector<DateTime> ReqTimes;
         bool UseSimpleBounds;
    };

    struct HistoryData 
    {
         std::vector<DataValue> DataValues;
    };

    struct ModificationInfo 
    {
         DateTime ModificationTime;
         HistoryUpdateType UpdateType;
         std::string UserName;
    };

    struct HistoryModifiedData 
    {
         std::vector<DataValue> DataValues;
         std::vector<ModificationInfo> ModificationInfos;
    };

    struct HistoryEvent 
    {
         std::vector<HistoryEventFieldList> Events;
    };

    struct HistoryReadParameters 
    {
         ExtensionObject HistoryReadDetails;
         TimestampsToReturn TimestampsToReturn;
         bool ReleaseContinuationPoints;
         std::vector<HistoryReadValueId> NodesToRead;
    };

    struct HistoryReadRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         HistoryReadParameters Parameters;

         HistoryReadRequest();
    };

    struct HistoryReadData 
    {
         std::vector<HistoryReadResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct HistoryReadResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         HistoryReadData Parameters;

         HistoryReadResponse();
    };

    struct WriteValue 
    {
         NodeId NodeId;
         uint32_t AttributeId;
         std::string IndexRange;
         DataValue Value;
    };

    struct WriteParameters 
    {
         std::vector<WriteValue> NodesToWrite;
    };

    struct WriteRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         WriteParameters Parameters;

         WriteRequest();
    };

    struct WriteData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct WriteResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         WriteData Parameters;

         WriteResponse();
    };

    struct HistoryUpdateDetails 
    {
         NodeId NodeId;
    };


    enum HistoryUpdateType : uint32_t
    {
         Insert = 1,
         Replace = 2,
         Update = 3,
         Delete = 4,
    };


    enum PerformUpdateType : uint32_t
    {
         Insert = 1,
         Replace = 2,
         Update = 3,
         Remove = 4,
    };

    struct UpdateDataDetails 
    {
         NodeId NodeId;
         PerformUpdateType PerformInsertReplace;
         std::vector<DataValue> UpdateValues;
    };

    struct UpdateStructureDataDetails 
    {
         NodeId NodeId;
         PerformUpdateType PerformInsertReplace;
         std::vector<DataValue> UpdateValues;
    };

    struct UpdateEventDetails 
    {
         NodeId NodeId;
         PerformUpdateType PerformInsertReplace;
         EventFilter Filter;
         std::vector<HistoryEventFieldList> EventData;
    };

    struct DeleteRawModifiedDetails 
    {
         NodeId NodeId;
         bool IsDeleteModified;
         DateTime StartTime;
         DateTime EndTime;
    };

    struct DeleteAtTimeDetails 
    {
         NodeId NodeId;
         std::vector<DateTime> ReqTimes;
    };

    struct DeleteEventDetails 
    {
         NodeId NodeId;
         std::vector<ByteString> EventIds;
    };

    struct HistoryUpdateResult 
    {
         StatusCode StatusCode;
         std::vector<StatusCode> OperationResults;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct HistoryUpdateEventResult 
    {
         StatusCode StatusCode;
         EventFilterResult EventFilterResult;
    };

    struct HistoryUpdateParameters 
    {
         std::vector<ExtensionObject> HistoryUpdateDetails;
    };

    struct HistoryUpdateRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         HistoryUpdateParameters Parameters;

         HistoryUpdateRequest();
    };

    struct HistoryUpdateData 
    {
         std::vector<HistoryUpdateResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct HistoryUpdateResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         HistoryUpdateData Parameters;

         HistoryUpdateResponse();
    };

    struct CallMethodParameters 
    {
         NodeId MethodId;
         std::vector<Variant> InputArguments;
    };

    struct CallMethodRequest 
    {
         NodeId TypeId;
         NodeId ObjectId;
         CallMethodParameters Parameters;

         CallMethodRequest();
    };

    struct CallMethodResult 
    {
         StatusCode StatusCode;
         std::vector<StatusCode> InputArgumentResults;
         std::vector<DiagnosticInfo> InputArgumentDiagnosticInfos;
         std::vector<Variant> OutputArguments;
    };

    struct CallParameters 
    {
         std::vector<CallMethodRequest> MethodsToCall;
    };

    struct CallRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CallParameters Parameters;

         CallRequest();
    };

    struct CallData 
    {
         std::vector<CallMethodResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct CallResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CallData Parameters;

         CallResponse();
    };


    enum MonitoringMode : uint32_t
    {
         Disabled = 0,
         Sampling = 1,
         Reporting = 2,
    };


    enum DataChangeTrigger : uint32_t
    {
         Status = 0,
         StatusValue = 1,
         StatusValueTimestamp = 2,
    };


    enum DeadbandType : uint32_t
    {
         None = 0,
         Absolute = 1,
         Percent = 2,
    };

    struct MonitoringFilter 
    {
    };

    struct DataChangeFilter 
    {
         DataChangeTrigger Trigger;
         uint32_t DeadbandType;
         double DeadbandValue;
    };

    struct EventFilter 
    {
         std::vector<SimpleAttributeOperand> SelectClauses;
         ContentFilter WhereClause;
    };

    struct AggregateConfiguration 
    {
         bool UseServerCapabilitiesDefaults;
         bool TreatUncertainAsBad;
         uint8_t PercentDataBad;
         uint8_t PercentDataGood;
         bool UseSlopedExtrapolation;
    };

    struct AggregateFilter 
    {
         DateTime StartTime;
         NodeId AggregateType;
         double ProcessingInterval;
         AggregateConfiguration AggregateConfiguration;
    };

    struct MonitoringFilterResult 
    {
    };

    struct EventFilterResult 
    {
         std::vector<StatusCode> SelectClauseResults;
         std::vector<DiagnosticInfo> SelectClauseDiagnosticInfos;
         ContentFilterResult WhereClauseResult;
    };

    struct AggregateFilterResult 
    {
         DateTime RevisedStartTime;
         double RevisedProcessingInterval;
         AggregateConfiguration RevisedAggregateConfiguration;
    };

    struct MonitoringParameters 
    {
         uint32_t ClientHandle;
         double SamplingInterval;
         ExtensionObject Filter;
         uint32_t QueueSize;
         bool DiscardOldest;
    };

    struct MonitoredItemCreateParameters 
    {
         MonitoringMode MonitoringMode;
         MonitoringParameters RequestedParameters;
    };

    struct MonitoredItemCreateRequest 
    {
         NodeId TypeId;
         ReadValueId ItemToMonitor;
         MonitoredItemCreateParameters Parameters;

         MonitoredItemCreateRequest();
    };

    struct MonitoredItemCreateResult 
    {
         StatusCode StatusCode;
         uint32_t MonitoredItemId;
         double RevisedSamplingInterval;
         uint32_t RevisedQueueSize;
         ExtensionObject FilterResult;
    };

    struct CreateMonitoredItemsParameters 
    {
         uint32_t SubscriptionId;
         TimestampsToReturn TimestampsToReturn;
         std::vector<MonitoredItemCreateRequest> ItemsToCreate;
    };

    struct CreateMonitoredItemsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CreateMonitoredItemsParameters Parameters;

         CreateMonitoredItemsRequest();
    };

    struct CreateMonitoredItemsData 
    {
         std::vector<MonitoredItemCreateResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct CreateMonitoredItemsResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CreateMonitoredItemsData Parameters;

         CreateMonitoredItemsResponse();
    };

    struct MonitoredItemModifyParameters 
    {
         MonitoringParameters RequestedParameters;
    };

    struct MonitoredItemModifyRequest 
    {
         NodeId TypeId;
         uint32_t MonitoredItemId;
         MonitoredItemModifyParameters Parameters;

         MonitoredItemModifyRequest();
    };

    struct MonitoredItemModifyResult 
    {
         StatusCode StatusCode;
         double RevisedSamplingInterval;
         uint32_t RevisedQueueSize;
         ExtensionObject FilterResult;
    };

    struct ModifyMonitoredItemsParameters 
    {
         uint32_t SubscriptionId;
         TimestampsToReturn TimestampsToReturn;
         std::vector<MonitoredItemModifyRequest> ItemsToModify;
    };

    struct ModifyMonitoredItemsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         ModifyMonitoredItemsParameters Parameters;

         ModifyMonitoredItemsRequest();
    };

    struct ModifyMonitoredItemsData 
    {
         std::vector<MonitoredItemModifyResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct ModifyMonitoredItemsResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         ModifyMonitoredItemsData Parameters;

         ModifyMonitoredItemsResponse();
    };

    struct SetMonitoringModeParameters 
    {
         uint32_t SubscriptionId;
         MonitoringMode MonitoringMode;
         std::vector<uint32_t> MonitoredItemIds;
    };

    struct SetMonitoringModeRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         SetMonitoringModeParameters Parameters;

         SetMonitoringModeRequest();
    };

    struct SetMonitoringModeData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct SetMonitoringModeResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         SetMonitoringModeData Parameters;

         SetMonitoringModeResponse();
    };

    struct SetTriggeringParameters 
    {
         uint32_t SubscriptionId;
         uint32_t TriggeringItemId;
         std::vector<uint32_t> LinksToAdd;
         std::vector<uint32_t> LinksToRemove;
    };

    struct SetTriggeringRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         SetTriggeringParameters Parameters;

         SetTriggeringRequest();
    };

    struct SetTriggeringData 
    {
         std::vector<StatusCode> AddResults;
         std::vector<DiagnosticInfo> AddDiagnosticInfos;
         std::vector<StatusCode> RemoveResults;
         std::vector<DiagnosticInfo> RemoveDiagnosticInfos;
    };

    struct SetTriggeringResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         SetTriggeringData Parameters;

         SetTriggeringResponse();
    };

    struct DeleteMonitoredItemsParameters 
    {
         uint32_t SubscriptionId;
         std::vector<uint32_t> MonitoredItemIds;
    };

    struct DeleteMonitoredItemsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         DeleteMonitoredItemsParameters Parameters;

         DeleteMonitoredItemsRequest();
    };

    struct DeleteMonitoredItemsData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct DeleteMonitoredItemsResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         DeleteMonitoredItemsData Parameters;

         DeleteMonitoredItemsResponse();
    };

    struct CreateSubscriptionParameters 
    {
         double RequestedPublishingInterval;
         uint32_t RequestedLifetimeCount;
         uint32_t RequestedMaxKeepAliveCount;
         uint32_t MaxNotificationsPerPublish;
         bool PublishingEnabled;
         uint8_t Priority;
    };

    struct CreateSubscriptionRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         CreateSubscriptionParameters Parameters;

         CreateSubscriptionRequest();
    };

    struct CreateSubscriptionData 
    {
         uint32_t SubscriptionId;
         double RevisedPublishingInterval;
         uint32_t RevisedLifetimeCount;
         uint32_t RevisedMaxKeepAliveCount;
    };

    struct CreateSubscriptionResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         CreateSubscriptionData Parameters;

         CreateSubscriptionResponse();
    };

    struct ModifySubscriptionParameters 
    {
         uint32_t SubscriptionId;
         double RequestedPublishingInterval;
         uint32_t RequestedLifetimeCount;
         uint32_t RequestedMaxKeepAliveCount;
         uint32_t MaxNotificationsPerPublish;
         uint8_t Priority;
    };

    struct ModifySubscriptionRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         ModifySubscriptionParameters Parameters;

         ModifySubscriptionRequest();
    };

    struct ModifySubscriptionData 
    {
         double RevisedPublishingInterval;
         uint32_t RevisedLifetimeCount;
         uint32_t RevisedMaxKeepAliveCount;
    };

    struct ModifySubscriptionResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         ModifySubscriptionData Parameters;

         ModifySubscriptionResponse();
    };

    struct SetPublishingModeParameters 
    {
         bool PublishingEnabled;
         std::vector<uint32_t> SubscriptionIds;
    };

    struct SetPublishingModeRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         SetPublishingModeParameters Parameters;

         SetPublishingModeRequest();
    };

    struct SetPublishingModeData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct SetPublishingModeResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         SetPublishingModeData Parameters;

         SetPublishingModeResponse();
    };

    struct NotificationMessage 
    {
         uint32_t SequenceNumber;
         DateTime PublishTime;
         std::vector<ExtensionObject> NotificationData;
    };

    struct NotificationData 
    {
    };

    struct DataChangeNotification 
    {
         std::vector<MonitoredItemNotification> MonitoredItems;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct MonitoredItemNotification 
    {
         uint32_t ClientHandle;
         DataValue Value;
    };

    struct EventNotificationList 
    {
         std::vector<EventFieldList> Events;
    };

    struct EventFieldList 
    {
         uint32_t ClientHandle;
         std::vector<Variant> EventFields;
    };

    struct HistoryEventFieldList 
    {
         std::vector<Variant> EventFields;
    };

    struct StatusChangeNotification 
    {
         StatusCode Status;
         DiagnosticInfo DiagnosticInfo;
    };

    struct SubscriptionAcknowledgement 
    {
         uint32_t SubscriptionId;
         uint32_t SequenceNumber;
    };

    struct PublishParameters 
    {
         std::vector<SubscriptionAcknowledgement> SubscriptionAcknowledgements;
    };

    struct PublishRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         PublishParameters Parameters;

         PublishRequest();
    };

    struct PublishData 
    {
         uint32_t SubscriptionId;
         std::vector<uint32_t> AvailableSequenceNumbers;
         bool MoreNotifications;
         NotificationMessage NotificationMessage;
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct PublishResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         PublishData Parameters;

         PublishResponse();
    };

    struct RepublishParameters 
    {
         uint32_t SubscriptionId;
         uint32_t RetransmitSequenceNumber;
    };

    struct RepublishRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         RepublishParameters Parameters;

         RepublishRequest();
    };

    struct RepublishData 
    {
         NotificationMessage NotificationMessage;
    };

    struct RepublishResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         RepublishData Parameters;

         RepublishResponse();
    };

    struct TransferResult 
    {
         StatusCode StatusCode;
         std::vector<uint32_t> AvailableSequenceNumbers;
    };

    struct TransferSubscriptionsParameters 
    {
         std::vector<uint32_t> SubscriptionIds;
         bool SendInitialValues;
    };

    struct TransferSubscriptionsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         TransferSubscriptionsParameters Parameters;

         TransferSubscriptionsRequest();
    };

    struct TransferSubscriptionsData 
    {
         std::vector<TransferResult> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct TransferSubscriptionsResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         TransferSubscriptionsData Parameters;

         TransferSubscriptionsResponse();
    };

    struct DeleteSubscriptionsParameters 
    {
         std::vector<uint32_t> SubscriptionIds;
    };

    struct DeleteSubscriptionsRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         DeleteSubscriptionsParameters Parameters;

         DeleteSubscriptionsRequest();
    };

    struct DeleteSubscriptionsData 
    {
         std::vector<StatusCode> Results;
         std::vector<DiagnosticInfo> DiagnosticInfos;
    };

    struct DeleteSubscriptionsResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         DeleteSubscriptionsData Parameters;

         DeleteSubscriptionsResponse();
    };


    // A simple enumerated type used for testing.
    enum EnumeratedTestType : uint32_t
    {
         Red = 1,
         Yellow = 4,
         Green = 5,
    };

    // ua:ExtensionObject
    struct ScalarTestType 
    {
         bool Boolean;
         char SByte;
         uint8_t Byte;
         int16_t Int16;
         uint16_t UInt16;
         int32_t Int32;
         uint32_t UInt32;
         int64_t Int64;
         uint64_t UInt64;
         float Float;
         double Double;
         std::string String;
         DateTime DateTime;
         opc:Guid Guid;
         ByteString ByteString;
         XmlElement XmlElement;
         NodeId NodeId;
         ExpandedNodeId ExpandedNodeId;
         StatusCode StatusCode;
         DiagnosticInfo DiagnosticInfo;
         QualifiedName QualifiedName;
         LocalizedText LocalizedText;
         ExtensionObject ExtensionObject;
         DataValue DataValue;
         EnumeratedTestType EnumeratedValue;
    };

    // ua:ExtensionObject
    struct ArrayTestType 
    {
         std::vector<bool> Booleans;
         std::vector<char> SBytes;
         std::vector<int16_t> Int16s;
         std::vector<uint16_t> UInt16s;
         std::vector<int32_t> Int32s;
         std::vector<uint32_t> UInt32s;
         std::vector<int64_t> Int64s;
         std::vector<uint64_t> UInt64s;
         std::vector<float> Floats;
         std::vector<double> Doubles;
         std::vector<std::string> Strings;
         std::vector<DateTime> DateTimes;
         std::vector<opc:Guid> Guids;
         std::vector<ByteString> ByteStrings;
         std::vector<XmlElement> XmlElements;
         std::vector<NodeId> NodeIds;
         std::vector<ExpandedNodeId> ExpandedNodeIds;
         std::vector<StatusCode> StatusCodes;
         std::vector<DiagnosticInfo> DiagnosticInfos;
         std::vector<QualifiedName> QualifiedNames;
         std::vector<LocalizedText> LocalizedTexts;
         std::vector<ExtensionObject> ExtensionObjects;
         std::vector<DataValue> DataValues;
         std::vector<Variant> Variants;
         std::vector<EnumeratedTestType> EnumeratedValues;
    };

    struct CompositeTestType 
    {
         ScalarTestType Field1;
         ArrayTestType Field2;
    };

    struct TestStackParameters 
    {
         uint32_t TestId;
         int32_t Iteration;
         Variant Input;
    };

    struct TestStackRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         TestStackParameters Parameters;

         TestStackRequest();
    };

    struct TestStackData 
    {
         Variant Output;
    };

    struct TestStackResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         TestStackData Parameters;

         TestStackResponse();
    };

    struct TestStackExParameters 
    {
         uint32_t TestId;
         int32_t Iteration;
         CompositeTestType Input;
    };

    struct TestStackExRequest 
    {
         NodeId TypeId;
         RequestHeader RequestHeader;
         TestStackExParameters Parameters;

         TestStackExRequest();
    };

    struct TestStackExData 
    {
         CompositeTestType Output;
    };

    struct TestStackExResponse 
    {
         NodeId TypeId;
         ResponseHeader ResponseHeader;
         TestStackExData Parameters;

         TestStackExResponse();
    };

    struct BuildInfo 
    {
         std::string ProductUri;
         std::string ManufacturerName;
         std::string ProductName;
         std::string SoftwareVersion;
         std::string BuildNumber;
         DateTime BuildDate;
    };


    enum RedundancySupport : uint32_t
    {
         None = 0,
         Cold = 1,
         Warm = 2,
         Hot = 3,
         Transparent = 4,
         HotAndMirrored = 5,
    };


    enum ServerState : uint32_t
    {
         Running = 0,
         Failed = 1,
         NoConfiguration = 2,
         Suspended = 3,
         Shutdown = 4,
         Test = 5,
         CommunicationFault = 6,
         Unknown = 7,
    };

    struct RedundantServerDataType 
    {
         std::string ServerId;
         uint8_t ServiceLevel;
         ServerState ServerState;
    };

    struct EndpointUrlListDataType 
    {
         std::vector<std::string> EndpointUrlList;
    };

    struct NetworkGroupDataType 
    {
         std::string ServerUri;
         std::vector<EndpointUrlListDataType> NetworkPaths;
    };

    struct SamplingIntervalDiagnosticsDataType 
    {
         double SamplingInterval;
         uint32_t MonitoredItemCount;
         uint32_t MaxMonitoredItemCount;
         uint32_t DisabledMonitoredItemCount;
    };

    struct ServerDiagnosticsSummaryDataType 
    {
         uint32_t ServerViewCount;
         uint32_t CurrentSessionCount;
         uint32_t CumulatedSessionCount;
         uint32_t SecurityRejectedSessionCount;
         uint32_t RejectedSessionCount;
         uint32_t SessionTimeoutCount;
         uint32_t SessionAbortCount;
         uint32_t CurrentSubscriptionCount;
         uint32_t CumulatedSubscriptionCount;
         uint32_t PublishingIntervalCount;
         uint32_t SecurityRejectedRequestsCount;
         uint32_t RejectedRequestsCount;
    };

    struct ServerStatusDataType 
    {
         DateTime StartTime;
         DateTime CurrentTime;
         ServerState State;
         BuildInfo BuildInfo;
         uint32_t SecondsTillShutdown;
         LocalizedText ShutdownReason;
    };

    struct SessionDiagnosticsDataType 
    {
         NodeId SessionId;
         std::string SessionName;
         ApplicationDescription ClientDescription;
         std::string ServerUri;
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         double ActualSessionTimeout;
         uint32_t MaxResponseMessageSize;
         DateTime ClientConnectionTime;
         DateTime ClientLastContactTime;
         uint32_t CurrentSubscriptionsCount;
         uint32_t CurrentMonitoredItemsCount;
         uint32_t CurrentPublishRequestsInQueue;
         ServiceCounterDataType TotalRequestCount;
         uint32_t UnauthorizedRequestCount;
         ServiceCounterDataType ReadCount;
         ServiceCounterDataType HistoryReadCount;
         ServiceCounterDataType WriteCount;
         ServiceCounterDataType HistoryUpdateCount;
         ServiceCounterDataType CallCount;
         ServiceCounterDataType CreateMonitoredItemsCount;
         ServiceCounterDataType ModifyMonitoredItemsCount;
         ServiceCounterDataType SetMonitoringModeCount;
         ServiceCounterDataType SetTriggeringCount;
         ServiceCounterDataType DeleteMonitoredItemsCount;
         ServiceCounterDataType CreateSubscriptionCount;
         ServiceCounterDataType ModifySubscriptionCount;
         ServiceCounterDataType SetPublishingModeCount;
         ServiceCounterDataType PublishCount;
         ServiceCounterDataType RepublishCount;
         ServiceCounterDataType TransferSubscriptionsCount;
         ServiceCounterDataType DeleteSubscriptionsCount;
         ServiceCounterDataType AddNodesCount;
         ServiceCounterDataType AddReferencesCount;
         ServiceCounterDataType DeleteNodesCount;
         ServiceCounterDataType DeleteReferencesCount;
         ServiceCounterDataType BrowseCount;
         ServiceCounterDataType BrowseNextCount;
         ServiceCounterDataType TranslateBrowsePathsToNodeIdsCount;
         ServiceCounterDataType QueryFirstCount;
         ServiceCounterDataType QueryNextCount;
         ServiceCounterDataType RegisterNodesCount;
         ServiceCounterDataType UnregisterNodesCount;
    };

    struct SessionSecurityDiagnosticsDataType 
    {
         NodeId SessionId;
         std::string ClientUserIdOfSession;
         std::vector<std::string> ClientUserIdHistory;
         std::string AuthenticationMechanism;
         std::string Encoding;
         std::string TransportProtocol;
         MessageSecurityMode SecurityMode;
         std::string SecurityPolicyUri;
         ByteString ClientCertificate;
    };

    struct ServiceCounterDataType 
    {
         uint32_t TotalCount;
         uint32_t ErrorCount;
    };

    struct StatusResult 
    {
         StatusCode StatusCode;
         DiagnosticInfo DiagnosticInfo;
    };

    struct SubscriptionDiagnosticsDataType 
    {
         NodeId SessionId;
         uint32_t SubscriptionId;
         uint8_t Priority;
         double PublishingInterval;
         uint32_t MaxKeepAliveCount;
         uint32_t MaxLifetimeCount;
         uint32_t MaxNotificationsPerPublish;
         bool PublishingEnabled;
         uint32_t ModifyCount;
         uint32_t EnableCount;
         uint32_t DisableCount;
         uint32_t RepublishRequestCount;
         uint32_t RepublishMessageRequestCount;
         uint32_t RepublishMessageCount;
         uint32_t TransferRequestCount;
         uint32_t TransferredToAltClientCount;
         uint32_t TransferredToSameClientCount;
         uint32_t PublishRequestCount;
         uint32_t DataChangeNotificationsCount;
         uint32_t EventNotificationsCount;
         uint32_t NotificationsCount;
         uint32_t LatePublishRequestCount;
         uint32_t CurrentKeepAliveCount;
         uint32_t CurrentLifetimeCount;
         uint32_t UnacknowledgedMessageCount;
         uint32_t DiscardedMessageCount;
         uint32_t MonitoredItemCount;
         uint32_t DisabledMonitoredItemCount;
         uint32_t MonitoringQueueOverflowCount;
         uint32_t NextSequenceNumber;
         uint32_t EventQueueOverFlowCount;
    };


    enum ModelChangeStructureVerbMask : uint32_t
    {
         NodeAdded = 1,
         NodeDeleted = 2,
         ReferenceAdded = 4,
         ReferenceDeleted = 8,
         DataTypeChanged = 16,
    };

    struct ModelChangeStructureDataType 
    {
         NodeId Affected;
         NodeId AffectedType;
         uint8_t Verb;
    };

    struct SemanticChangeStructureDataType 
    {
         NodeId Affected;
         NodeId AffectedType;
    };

    struct Range 
    {
         double Low;
         double High;
    };

    struct EUInformation 
    {
         std::string NamespaceUri;
         int32_t UnitId;
         LocalizedText DisplayName;
         LocalizedText Description;
    };


    enum AxisScaleEnumeration : uint32_t
    {
         Linear = 0,
         Log = 1,
         Ln = 2,
    };

    struct ComplexNumberType 
    {
         float Real;
         float Imaginary;
    };

    struct DoubleComplexNumberType 
    {
         double Real;
         double Imaginary;
    };

    struct AxisInformation 
    {
         EUInformation EngineeringUnits;
         Range EURange;
         LocalizedText Title;
         AxisScaleEnumeration AxisScaleType;
         std::vector<double> AxisSteps;
    };

    struct XVType 
    {
         double X;
         float Value;
    };

    struct ProgramDiagnosticDataType 
    {
         NodeId CreateSessionId;
         std::string CreateClientName;
         DateTime InvocationCreationTime;
         DateTime LastTransitionTime;
         std::string LastMethodCall;
         NodeId LastMethodSessionId;
         std::vector<Argument> LastMethodInputArguments;
         std::vector<Argument> LastMethodOutputArguments;
         DateTime LastMethodCallTime;
         StatusResult LastMethodReturnStatus;
    };

    struct Annotation 
    {
         std::string Message;
         std::string UserName;
         DateTime AnnotationTime;
    };


    enum ExceptionDeviationFormat : uint32_t
    {
         AbsoluteValue = 0,
         PercentOfRange = 1,
         PercentOfValue = 2,
         PercentOfEURange = 3,
         Unknown = 4,
    };

   }

} // namespace
    
