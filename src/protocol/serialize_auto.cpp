// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

/// @author Olivier Roulet-Dubonnet 
/// @email olivier@sintef.no 
/// @brief Opc Ua Binary. 
/// @license GNU LGPL
///
/// Distributed under the GNU LGPL License
/// (See accompanying file LICENSE or copy at
/// http://www.gnu.org/licenses/lgpl.html)
///

#include "binary_serialization.h"
#include <opc/ua/protocol/protocol.h>

#include <opc/ua/protocol/binary/stream.h>

namespace OpcUa
{   
    namespace Binary
    {

    template<>
    void DataSerializer::Serialize<OpenFileMode>(const OpenFileMode& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<NodeClass>(const NodeClass& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<ApplicationType>(const ApplicationType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<MessageSecurityMode>(const MessageSecurityMode& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<UserTokenType>(const UserTokenType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<SecurityTokenRequestType>(const SecurityTokenRequestType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<NodeAttributesMask>(const NodeAttributesMask& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<AttributeWriteMask>(const AttributeWriteMask& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<BrowseDirection>(const BrowseDirection& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<BrowseResultMask>(const BrowseResultMask& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<ComplianceLevel>(const ComplianceLevel& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<FilterOperator>(const FilterOperator& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<TimestampsToReturn>(const TimestampsToReturn& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateType>(const HistoryUpdateType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<PerformUpdateType>(const PerformUpdateType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<MonitoringMode>(const MonitoringMode& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<DataChangeTrigger>(const DataChangeTrigger& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<DeadbandType>(const DeadbandType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<EnumeratedTestType>(const EnumeratedTestType& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<RedundancySupport>(const RedundancySupport& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<ServerState>(const ServerState& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<ModelChangeStructureVerbMask>(const ModelChangeStructureVerbMask& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<AxisScaleEnumeration>(const AxisScaleEnumeration& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<ExceptionDeviationFormat>(const ExceptionDeviationFormat& data)
    {
        *this << static_cast<uint32_t>(data);
    }


    template<>
    void DataSerializer::Serialize<XmlElement>(const XmlElement& data)
    {
        *this << data.Length;
        SerializeContainer(*this, data.Value);
    }


    template<>
    void DataSerializer::Serialize<DiagnosticInfo>(const DiagnosticInfo& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.SymbolicId;
        if ((data.Encoding) & (1<<(1))) *this << data.NamespaceURI;
        if ((data.Encoding) & (1<<(2))) *this << data.LocalizedText;
        if ((data.Encoding) & (1<<(4))) *this << data.AdditionalInfo;
        if ((data.Encoding) & (1<<(5))) *this << data.InnerStatusCode;
        if ((data.Encoding) & (1<<(6))) *this << data.InnerDiagnosticInfo;
    }


    template<>
    void DataSerializer::Serialize<Argument>(const Argument& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Name;
        *this << data.DataType;
        *this << data.ValueRank;
        SerializeContainer(*this, data.ArrayDimensions);
        *this << data.Description;
    }


    template<>
    void DataSerializer::Serialize<EnumValueType>(const EnumValueType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Value;
        *this << data.DisplayName;
        *this << data.Description;
    }


    template<>
    void DataSerializer::Serialize<TimeZoneDataType>(const TimeZoneDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Offset;
        *this << data.DaylightSavingInOffset;
    }


    template<>
    void DataSerializer::Serialize<ApplicationDescription>(const ApplicationDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ApplicationUri;
        *this << data.ProductUri;
        *this << data.ApplicationName;
        *this << data.ApplicationType;
        *this << data.GatewayServerUri;
        *this << data.DiscoveryProfileUri;
        SerializeContainer(*this, data.DiscoveryUrls);
    }


    template<>
    void DataSerializer::Serialize<RequestHeader>(const RequestHeader& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.AuthenticationToken;
        *this << data.Timestamp;
        *this << data.RequestHandle;
        *this << data.ReturnDiagnostics;
        *this << data.AuditEntryId;
        *this << data.TimeoutHint;
        *this << data.AdditionalHeader;
    }


    template<>
    void DataSerializer::Serialize<ResponseHeader>(const ResponseHeader& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Timestamp;
        *this << data.RequestHandle;
        *this << data.ServiceResult;
        *this << data.ServiceDiagnostics;
        SerializeContainer(*this, data.StringTable);
        *this << data.AdditionalHeader;
    }


    template<>
    void DataSerializer::Serialize<ServiceFault>(const ServiceFault& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
    }


    template<>
    void DataSerializer::Serialize<FindServersParameters>(const FindServersParameters& data)
    {
        *this << data.EndpointUrl;
        SerializeContainer(*this, data.LocaleIds);
        SerializeContainer(*this, data.ServerUris);
    }


    template<>
    void DataSerializer::Serialize<FindServersRequest>(const FindServersRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<FindServersResult>(const FindServersResult& data)
    {
        SerializeContainer(*this, data.Servers);
    }


    template<>
    void DataSerializer::Serialize<FindServersResponse>(const FindServersResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<UserTokenPolicy>(const UserTokenPolicy& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.PolicyId;
        *this << data.TokenType;
        *this << data.IssuedTokenType;
        *this << data.IssuerEndpointUrl;
        *this << data.SecurityPolicyUri;
    }


    template<>
    void DataSerializer::Serialize<EndpointDescription>(const EndpointDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.EndpointUrl;
        *this << data.Server;
        *this << data.ServerCertificate;
        *this << data.SecurityMode;
        *this << data.SecurityPolicyUri;
        SerializeContainer(*this, data.UserIdentityTokens);
        *this << data.TransportProfileUri;
        *this << data.SecurityLevel;
    }


    template<>
    void DataSerializer::Serialize<GetEndpointsParameters>(const GetEndpointsParameters& data)
    {
        *this << data.EndpointUrl;
        SerializeContainer(*this, data.LocaleIds);
        SerializeContainer(*this, data.ProfileUris);
    }


    template<>
    void DataSerializer::Serialize<GetEndpointsRequest>(const GetEndpointsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<GetEndpointsResponse>(const GetEndpointsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        SerializeContainer(*this, data.Endpoints);
    }


    template<>
    void DataSerializer::Serialize<RegisteredServer>(const RegisteredServer& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ServerUri;
        *this << data.ProductUri;
        SerializeContainer(*this, data.ServerNames);
        *this << data.ServerType;
        *this << data.GatewayServerUri;
        SerializeContainer(*this, data.DiscoveryUrls);
        *this << data.SemaphoreFilePath;
        *this << data.IsOnline;
    }


    template<>
    void DataSerializer::Serialize<RegisterServerParameters>(const RegisterServerParameters& data)
    {
        *this << data.Server;
    }


    template<>
    void DataSerializer::Serialize<RegisterServerRequest>(const RegisterServerRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<RegisterServerResponse>(const RegisterServerResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
    }


    template<>
    void DataSerializer::Serialize<ChannelSecurityToken>(const ChannelSecurityToken& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ChannelId;
        *this << data.TokenId;
        *this << data.CreatedAt;
        *this << data.RevisedLifetime;
    }


    template<>
    void DataSerializer::Serialize<OpenSecureChannelParameters>(const OpenSecureChannelParameters& data)
    {
        *this << data.ClientProtocolVersion;
        *this << data.RequestType;
        *this << data.SecurityMode;
        *this << data.ClientNonce;
        *this << data.RequestedLifetime;
    }


    template<>
    void DataSerializer::Serialize<OpenSecureChannelRequest>(const OpenSecureChannelRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<OpenSecureChannelResult>(const OpenSecureChannelResult& data)
    {
        *this << data.ServerProtocolVersion;
        *this << data.SecurityToken;
        *this << data.ServerNonce;
    }


    template<>
    void DataSerializer::Serialize<OpenSecureChannelResponse>(const OpenSecureChannelResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CloseSecureChannelRequest>(const CloseSecureChannelRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
    }


    template<>
    void DataSerializer::Serialize<CloseSecureChannelResponse>(const CloseSecureChannelResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
    }


    template<>
    void DataSerializer::Serialize<SignedSoftwareCertificate>(const SignedSoftwareCertificate& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.CertificateData;
        *this << data.Signature;
    }


    template<>
    void DataSerializer::Serialize<SignatureData>(const SignatureData& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Algorithm;
        *this << data.Signature;
    }


    template<>
    void DataSerializer::Serialize<CreateSessionParameters>(const CreateSessionParameters& data)
    {
        *this << data.ClientDescription;
        *this << data.ServerUri;
        *this << data.EndpointUrl;
        *this << data.SessionName;
        *this << data.ClientNonce;
        *this << data.ClientCertificate;
        *this << data.RequestedSessionTimeout;
        *this << data.MaxResponseMessageSize;
    }


    template<>
    void DataSerializer::Serialize<CreateSessionRequest>(const CreateSessionRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CreateSessionResult>(const CreateSessionResult& data)
    {
        *this << data.SessionId;
        *this << data.AuthenticationToken;
        *this << data.RevisedSessionTimeout;
        *this << data.ServerNonce;
        *this << data.ServerCertificate;
        SerializeContainer(*this, data.ServerEndpoints);
        SerializeContainer(*this, data.ServerSoftwareCertificates);
        *this << data.ServerSignature;
        *this << data.MaxRequestMessageSize;
    }


    template<>
    void DataSerializer::Serialize<CreateSessionResponse>(const CreateSessionResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<UserIdentityToken>(const UserIdentityToken& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.PolicyId;
    }


    template<>
    void DataSerializer::Serialize<AnonymousIdentityToken>(const AnonymousIdentityToken& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.PolicyId;
    }


    template<>
    void DataSerializer::Serialize<UserNameIdentityToken>(const UserNameIdentityToken& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.PolicyId;
        *this << data.UserName;
        *this << data.Password;
        *this << data.EncryptionAlgorithm;
    }


    template<>
    void DataSerializer::Serialize<X509IdentityToken>(const X509IdentityToken& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.PolicyId;
        *this << data.CertificateData;
    }


    template<>
    void DataSerializer::Serialize<IssuedIdentityToken>(const IssuedIdentityToken& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.PolicyId;
        *this << data.TokenData;
        *this << data.EncryptionAlgorithm;
    }


    template<>
    void DataSerializer::Serialize<ActivateSessionParameters>(const ActivateSessionParameters& data)
    {
        *this << data.ClientSignature;
        SerializeContainer(*this, data.ClientSoftwareCertificates);
        SerializeContainer(*this, data.LocaleIds);
        *this << data.UserIdentityToken;
        *this << data.UserTokenSignature;
    }


    template<>
    void DataSerializer::Serialize<ActivateSessionRequest>(const ActivateSessionRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ActivateSessionResult>(const ActivateSessionResult& data)
    {
        *this << data.ServerNonce;
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<ActivateSessionResponse>(const ActivateSessionResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CloseSessionRequest>(const CloseSessionRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.DeleteSubscriptions;
    }


    template<>
    void DataSerializer::Serialize<CloseSessionResponse>(const CloseSessionResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
    }


    template<>
    void DataSerializer::Serialize<CancelParameters>(const CancelParameters& data)
    {
        *this << data.RequestHandle;
    }


    template<>
    void DataSerializer::Serialize<CancelRequest>(const CancelRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CancelResult>(const CancelResult& data)
    {
        *this << data.CancelCount;
    }


    template<>
    void DataSerializer::Serialize<CancelResponse>(const CancelResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<NodeAttributes>(const NodeAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
    }


    template<>
    void DataSerializer::Serialize<ObjectAttributes>(const ObjectAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.EventNotifier;
    }


    template<>
    void DataSerializer::Serialize<VariableAttributes>(const VariableAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.Value;
        *this << data.DataType;
        *this << data.ValueRank;
        SerializeContainer(*this, data.ArrayDimensions);
        *this << data.AccessLevel;
        *this << data.UserAccessLevel;
        *this << data.MinimumSamplingInterval;
        *this << data.Historizing;
    }


    template<>
    void DataSerializer::Serialize<MethodAttributes>(const MethodAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.Executable;
        *this << data.UserExecutable;
    }


    template<>
    void DataSerializer::Serialize<ObjectTypeAttributes>(const ObjectTypeAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.IsAbstract;
    }


    template<>
    void DataSerializer::Serialize<VariableTypeAttributes>(const VariableTypeAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.Value;
        *this << data.DataType;
        *this << data.ValueRank;
        SerializeContainer(*this, data.ArrayDimensions);
        *this << data.IsAbstract;
    }


    template<>
    void DataSerializer::Serialize<ReferenceTypeAttributes>(const ReferenceTypeAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.IsAbstract;
        *this << data.Symmetric;
        *this << data.InverseName;
    }


    template<>
    void DataSerializer::Serialize<DataTypeAttributes>(const DataTypeAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.IsAbstract;
    }


    template<>
    void DataSerializer::Serialize<ViewAttributes>(const ViewAttributes& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SpecifiedAttributes;
        *this << data.DisplayName;
        *this << data.Description;
        *this << data.WriteMask;
        *this << data.UserWriteMask;
        *this << data.ContainsNoLoops;
        *this << data.EventNotifier;
    }


    template<>
    void DataSerializer::Serialize<AddNodesItem>(const AddNodesItem& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ParentNodeId;
        *this << data.ReferenceTypeId;
        *this << data.RequestedNewNodeId;
        *this << data.BrowseName;
        *this << data.NodeClass;
        *this << data.NodeAttributes;
        *this << data.TypeDefinition;
    }


    template<>
    void DataSerializer::Serialize<AddNodesResult>(const AddNodesResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.AddedNodeId;
    }


    template<>
    void DataSerializer::Serialize<AddNodesParameters>(const AddNodesParameters& data)
    {
        SerializeContainer(*this, data.NodesToAdd);
    }


    template<>
    void DataSerializer::Serialize<AddNodesRequest>(const AddNodesRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<AddNodesResponse>(const AddNodesResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<AddReferencesItem>(const AddReferencesItem& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SourceNodeId;
        *this << data.ReferenceTypeId;
        *this << data.IsForward;
        *this << data.TargetServerUri;
        *this << data.TargetNodeId;
        *this << data.TargetNodeClass;
    }


    template<>
    void DataSerializer::Serialize<AddReferencesParameters>(const AddReferencesParameters& data)
    {
        SerializeContainer(*this, data.ReferencesToAdd);
    }


    template<>
    void DataSerializer::Serialize<AddReferencesRequest>(const AddReferencesRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<AddReferencesResult>(const AddReferencesResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<AddReferencesResponse>(const AddReferencesResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteNodesItem>(const DeleteNodesItem& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.DeleteTargetReferences;
    }


    template<>
    void DataSerializer::Serialize<DeleteNodesParameters>(const DeleteNodesParameters& data)
    {
        SerializeContainer(*this, data.NodesToDelete);
    }


    template<>
    void DataSerializer::Serialize<DeleteNodesRequest>(const DeleteNodesRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteNodesResult>(const DeleteNodesResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<DeleteNodesResponse>(const DeleteNodesResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteReferencesItem>(const DeleteReferencesItem& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SourceNodeId;
        *this << data.ReferenceTypeId;
        *this << data.IsForward;
        *this << data.TargetNodeId;
        *this << data.DeleteBidirectional;
    }


    template<>
    void DataSerializer::Serialize<DeleteReferencesParameters>(const DeleteReferencesParameters& data)
    {
        SerializeContainer(*this, data.ReferencesToDelete);
    }


    template<>
    void DataSerializer::Serialize<DeleteReferencesRequest>(const DeleteReferencesRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteReferencesResult>(const DeleteReferencesResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<DeleteReferencesResponse>(const DeleteReferencesResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ViewDescription>(const ViewDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ViewId;
        *this << data.Timestamp;
        *this << data.ViewVersion;
    }


    template<>
    void DataSerializer::Serialize<BrowseDescription>(const BrowseDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.BrowseDirection;
        *this << data.ReferenceTypeId;
        *this << data.IncludeSubtypes;
        *this << data.NodeClassMask;
        *this << data.ResultMask;
    }


    template<>
    void DataSerializer::Serialize<ReferenceDescription>(const ReferenceDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ReferenceTypeId;
        *this << data.IsForward;
        *this << data.NodeId;
        *this << data.BrowseName;
        *this << data.DisplayName;
        *this << data.NodeClass;
        *this << data.TypeDefinition;
    }


    template<>
    void DataSerializer::Serialize<BrowseResult>(const BrowseResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.ContinuationPoint;
        SerializeContainer(*this, data.References);
    }


    template<>
    void DataSerializer::Serialize<BrowseParameters>(const BrowseParameters& data)
    {
        *this << data.View;
        *this << data.RequestedMaxReferencesPerNode;
        SerializeContainer(*this, data.NodesToBrowse);
    }


    template<>
    void DataSerializer::Serialize<BrowseRequest>(const BrowseRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<BrowseResponse>(const BrowseResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<BrowseNextParameters>(const BrowseNextParameters& data)
    {
        *this << data.ReleaseContinuationPoints;
        SerializeContainer(*this, data.ContinuationPoints);
    }


    template<>
    void DataSerializer::Serialize<BrowseNextRequest>(const BrowseNextRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<BrowseNextResult>(const BrowseNextResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<BrowseNextResponse>(const BrowseNextResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<RelativePathElement>(const RelativePathElement& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ReferenceTypeId;
        *this << data.IsInverse;
        *this << data.IncludeSubtypes;
        *this << data.TargetName;
    }


    template<>
    void DataSerializer::Serialize<RelativePath>(const RelativePath& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.Elements);
    }


    template<>
    void DataSerializer::Serialize<BrowsePath>(const BrowsePath& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.StartingNode;
        *this << data.RelativePath;
    }


    template<>
    void DataSerializer::Serialize<BrowsePathTarget>(const BrowsePathTarget& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.TargetId;
        *this << data.RemainingPathIndex;
    }


    template<>
    void DataSerializer::Serialize<BrowsePathResult>(const BrowsePathResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        SerializeContainer(*this, data.Targets);
    }


    template<>
    void DataSerializer::Serialize<TranslateBrowsePathsToNodeIdsParameters>(const TranslateBrowsePathsToNodeIdsParameters& data)
    {
        SerializeContainer(*this, data.BrowsePaths);
    }


    template<>
    void DataSerializer::Serialize<TranslateBrowsePathsToNodeIdsRequest>(const TranslateBrowsePathsToNodeIdsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<TranslateBrowsePathsToNodeIdsResult>(const TranslateBrowsePathsToNodeIdsResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<TranslateBrowsePathsToNodeIdsResponse>(const TranslateBrowsePathsToNodeIdsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<RegisterNodesParameters>(const RegisterNodesParameters& data)
    {
        SerializeContainer(*this, data.NodesToRegister);
    }


    template<>
    void DataSerializer::Serialize<RegisterNodesRequest>(const RegisterNodesRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<RegisterNodesResult>(const RegisterNodesResult& data)
    {
        SerializeContainer(*this, data.RegisteredNodeIds);
    }


    template<>
    void DataSerializer::Serialize<RegisterNodesResponse>(const RegisterNodesResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<UnregisterNodesParameters>(const UnregisterNodesParameters& data)
    {
        SerializeContainer(*this, data.NodesToUnregister);
    }


    template<>
    void DataSerializer::Serialize<UnregisterNodesRequest>(const UnregisterNodesRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<UnregisterNodesResponse>(const UnregisterNodesResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
    }


    template<>
    void DataSerializer::Serialize<EndpointConfiguration>(const EndpointConfiguration& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.OperationTimeout;
        *this << data.UseBinaryEncoding;
        *this << data.MaxStringLength;
        *this << data.MaxByteStringLength;
        *this << data.MaxArrayLength;
        *this << data.MaxMessageSize;
        *this << data.MaxBufferSize;
        *this << data.ChannelLifetime;
        *this << data.SecurityTokenLifetime;
    }


    template<>
    void DataSerializer::Serialize<SupportedProfile>(const SupportedProfile& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.OrganizationUri;
        *this << data.ProfileId;
        *this << data.ComplianceTool;
        *this << data.ComplianceDate;
        *this << data.ComplianceLevel;
        SerializeContainer(*this, data.UnsupportedUnitIds);
    }


    template<>
    void DataSerializer::Serialize<SoftwareCertificate>(const SoftwareCertificate& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ProductName;
        *this << data.ProductUri;
        *this << data.VendorName;
        *this << data.VendorProductCertificate;
        *this << data.SoftwareVersion;
        *this << data.BuildNumber;
        *this << data.BuildDate;
        *this << data.IssuedBy;
        *this << data.IssueDate;
        SerializeContainer(*this, data.SupportedProfiles);
    }


    template<>
    void DataSerializer::Serialize<QueryDataDescription>(const QueryDataDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.RelativePath;
        *this << data.AttributeId;
        *this << data.IndexRange;
    }


    template<>
    void DataSerializer::Serialize<NodeTypeDescription>(const NodeTypeDescription& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.TypeDefinitionNode;
        *this << data.IncludeSubTypes;
        SerializeContainer(*this, data.DataToReturn);
    }


    template<>
    void DataSerializer::Serialize<QueryDataSet>(const QueryDataSet& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.TypeDefinitionNode;
        SerializeContainer(*this, data.Values);
    }


    template<>
    void DataSerializer::Serialize<NodeReference>(const NodeReference& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.ReferenceTypeId;
        *this << data.IsForward;
        SerializeContainer(*this, data.ReferencedNodeIds);
    }


    template<>
    void DataSerializer::Serialize<ContentFilterElement>(const ContentFilterElement& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.FilterOperator;
        SerializeContainer(*this, data.FilterOperands);
    }


    template<>
    void DataSerializer::Serialize<ContentFilter>(const ContentFilter& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.Elements);
    }


    template<>
    void DataSerializer::Serialize<FilterOperand>(const FilterOperand& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        SerializeContainer(*this, data.Body);
    }


    template<>
    void DataSerializer::Serialize<ElementOperand>(const ElementOperand& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Index;
    }


    template<>
    void DataSerializer::Serialize<LiteralOperand>(const LiteralOperand& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Value;
    }


    template<>
    void DataSerializer::Serialize<AttributeOperand>(const AttributeOperand& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.Alias;
        *this << data.BrowsePath;
        *this << data.AttributeId;
        *this << data.IndexRange;
    }


    template<>
    void DataSerializer::Serialize<SimpleAttributeOperand>(const SimpleAttributeOperand& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.TypeDefinitionId;
        SerializeContainer(*this, data.BrowsePath);
        *this << data.AttributeId;
        *this << data.IndexRange;
    }


    template<>
    void DataSerializer::Serialize<ContentFilterElementResult>(const ContentFilterElementResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        SerializeContainer(*this, data.OperandStatusCodes);
        SerializeContainer(*this, data.OperandDiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<ContentFilterResult>(const ContentFilterResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.ElementResults);
        SerializeContainer(*this, data.ElementDiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<ParsingResult>(const ParsingResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        SerializeContainer(*this, data.DataStatusCodes);
        SerializeContainer(*this, data.DataDiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<QueryFirstParameters>(const QueryFirstParameters& data)
    {
        *this << data.View;
        SerializeContainer(*this, data.NodeTypes);
        *this << data.Filter;
        *this << data.MaxDataSetsToReturn;
        *this << data.MaxReferencesToReturn;
    }


    template<>
    void DataSerializer::Serialize<QueryFirstRequest>(const QueryFirstRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<QueryFirstResult>(const QueryFirstResult& data)
    {
        SerializeContainer(*this, data.QueryDataSets);
        *this << data.ContinuationPoint;
        SerializeContainer(*this, data.ParsingResults);
        SerializeContainer(*this, data.DiagnosticInfos);
        *this << data.FilterResult;
    }


    template<>
    void DataSerializer::Serialize<QueryFirstResponse>(const QueryFirstResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<QueryNextParameters>(const QueryNextParameters& data)
    {
        *this << data.ReleaseContinuationPoint;
        *this << data.ContinuationPoint;
    }


    template<>
    void DataSerializer::Serialize<QueryNextRequest>(const QueryNextRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<QueryNextResult>(const QueryNextResult& data)
    {
        SerializeContainer(*this, data.QueryDataSets);
        *this << data.RevisedContinuationPoint;
    }


    template<>
    void DataSerializer::Serialize<QueryNextResponse>(const QueryNextResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ReadValueId>(const ReadValueId& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.AttributeId;
        *this << data.IndexRange;
        *this << data.DataEncoding;
    }


    template<>
    void DataSerializer::Serialize<ReadParameters>(const ReadParameters& data)
    {
        *this << data.MaxAge;
        *this << data.TimestampsToReturn;
        SerializeContainer(*this, data.AttributesToRead);
    }


    template<>
    void DataSerializer::Serialize<ReadRequest>(const ReadRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ReadResult>(const ReadResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<ReadResponse>(const ReadResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<HistoryReadValueId>(const HistoryReadValueId& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.IndexRange;
        *this << data.DataEncoding;
        *this << data.ContinuationPoint;
    }


    template<>
    void DataSerializer::Serialize<HistoryReadResult>(const HistoryReadResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.ContinuationPoint;
        *this << data.HistoryData;
    }


    template<>
    void DataSerializer::Serialize<HistoryReadDetails>(const HistoryReadDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        SerializeContainer(*this, data.Body);
    }


    template<>
    void DataSerializer::Serialize<ReadRawModifiedDetails>(const ReadRawModifiedDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.IsReadModified;
        *this << data.StartTime;
        *this << data.EndTime;
        *this << data.NumValuesPerNode;
        *this << data.ReturnBounds;
    }


    template<>
    void DataSerializer::Serialize<ReadAtTimeDetails>(const ReadAtTimeDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.ReqTimes);
        *this << data.UseSimpleBounds;
    }


    template<>
    void DataSerializer::Serialize<HistoryData>(const HistoryData& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.DataValues);
    }


    template<>
    void DataSerializer::Serialize<ModificationInfo>(const ModificationInfo& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ModificationTime;
        *this << data.UpdateType;
        *this << data.UserName;
    }


    template<>
    void DataSerializer::Serialize<HistoryModifiedData>(const HistoryModifiedData& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.DataValues);
        SerializeContainer(*this, data.ModificationInfos);
    }


    template<>
    void DataSerializer::Serialize<HistoryReadParameters>(const HistoryReadParameters& data)
    {
        *this << data.HistoryReadDetails;
        *this << data.TimestampsToReturn;
        *this << data.ReleaseContinuationPoints;
        SerializeContainer(*this, data.AttributesToRead);
    }


    template<>
    void DataSerializer::Serialize<HistoryReadRequest>(const HistoryReadRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<HistoryReadResponse>(const HistoryReadResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<WriteValue>(const WriteValue& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.AttributeId;
        *this << data.IndexRange;
        *this << data.Value;
    }


    template<>
    void DataSerializer::Serialize<WriteParameters>(const WriteParameters& data)
    {
        SerializeContainer(*this, data.NodesToWrite);
    }


    template<>
    void DataSerializer::Serialize<WriteRequest>(const WriteRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<WriteResult>(const WriteResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<WriteResponse>(const WriteResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateDetails>(const HistoryUpdateDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
    }


    template<>
    void DataSerializer::Serialize<UpdateDataDetails>(const UpdateDataDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.PerformInsertReplace;
        SerializeContainer(*this, data.UpdateValues);
    }


    template<>
    void DataSerializer::Serialize<UpdateStructureDataDetails>(const UpdateStructureDataDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.PerformInsertReplace;
        SerializeContainer(*this, data.UpdateValues);
    }


    template<>
    void DataSerializer::Serialize<DeleteRawModifiedDetails>(const DeleteRawModifiedDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.IsDeleteModified;
        *this << data.StartTime;
        *this << data.EndTime;
    }


    template<>
    void DataSerializer::Serialize<DeleteAtTimeDetails>(const DeleteAtTimeDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        SerializeContainer(*this, data.ReqTimes);
    }


    template<>
    void DataSerializer::Serialize<DeleteEventDetails>(const DeleteEventDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        SerializeContainer(*this, data.EventIds);
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateResult>(const HistoryUpdateResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        SerializeContainer(*this, data.OperationResults);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateParameters>(const HistoryUpdateParameters& data)
    {
        SerializeContainer(*this, data.HistoryUpdateDetails);
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateRequest>(const HistoryUpdateRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateResponse>(const HistoryUpdateResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<CallMethodParameters>(const CallMethodParameters& data)
    {
        *this << data.MethodId;
        SerializeContainer(*this, data.InputArguments);
    }


    template<>
    void DataSerializer::Serialize<CallMethodRequest>(const CallMethodRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ObjectId;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CallMethodResult>(const CallMethodResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        SerializeContainer(*this, data.InputArgumentResults);
        SerializeContainer(*this, data.InputArgumentDiagnosticInfos);
        SerializeContainer(*this, data.OutputArguments);
    }


    template<>
    void DataSerializer::Serialize<CallParameters>(const CallParameters& data)
    {
        SerializeContainer(*this, data.MethodsToCall);
    }


    template<>
    void DataSerializer::Serialize<CallRequest>(const CallRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CallResult>(const CallResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<CallResponse>(const CallResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<MonitoringFilter>(const MonitoringFilter& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        SerializeContainer(*this, data.Body);
    }


    template<>
    void DataSerializer::Serialize<DataChangeFilter>(const DataChangeFilter& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Trigger;
        *this << data.DeadbandType;
        *this << data.DeadbandValue;
    }


    template<>
    void DataSerializer::Serialize<EventFilter>(const EventFilter& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.SelectClauses);
        *this << data.WhereClause;
    }


    template<>
    void DataSerializer::Serialize<ReadEventDetails>(const ReadEventDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NumValuesPerNode;
        *this << data.StartTime;
        *this << data.EndTime;
        *this << data.Filter;
    }


    template<>
    void DataSerializer::Serialize<AggregateConfiguration>(const AggregateConfiguration& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.UseServerCapabilitiesDefaults;
        *this << data.TreatUncertainAsBad;
        *this << data.PercentDataBad;
        *this << data.PercentDataGood;
        *this << data.UseSlopedExtrapolation;
    }


    template<>
    void DataSerializer::Serialize<ReadProcessedDetails>(const ReadProcessedDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.StartTime;
        *this << data.EndTime;
        *this << data.ProcessingInterval;
        SerializeContainer(*this, data.AggregateType);
        *this << data.AggregateConfiguration;
    }


    template<>
    void DataSerializer::Serialize<AggregateFilter>(const AggregateFilter& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.StartTime;
        *this << data.AggregateType;
        *this << data.ProcessingInterval;
        *this << data.AggregateConfiguration;
    }


    template<>
    void DataSerializer::Serialize<MonitoringFilterResult>(const MonitoringFilterResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        SerializeContainer(*this, data.Body);
    }


    template<>
    void DataSerializer::Serialize<EventFilterResult>(const EventFilterResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.SelectClauseResults);
        SerializeContainer(*this, data.SelectClauseDiagnosticInfos);
        *this << data.WhereClauseResult;
    }


    template<>
    void DataSerializer::Serialize<HistoryUpdateEventResult>(const HistoryUpdateEventResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.EventFilterResult;
    }


    template<>
    void DataSerializer::Serialize<AggregateFilterResult>(const AggregateFilterResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.RevisedStartTime;
        *this << data.RevisedProcessingInterval;
        *this << data.RevisedAggregateConfiguration;
    }


    template<>
    void DataSerializer::Serialize<MonitoringParameters>(const MonitoringParameters& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ClientHandle;
        *this << data.SamplingInterval;
        *this << data.Filter;
        *this << data.QueueSize;
        *this << data.DiscardOldest;
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemCreateParameters>(const MonitoredItemCreateParameters& data)
    {
        *this << data.MonitoringMode;
        *this << data.RequestedParameters;
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemCreateRequest>(const MonitoredItemCreateRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ItemToMonitor;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemCreateResult>(const MonitoredItemCreateResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.MonitoredItemId;
        *this << data.RevisedSamplingInterval;
        *this << data.RevisedQueueSize;
        *this << data.FilterResult;
    }


    template<>
    void DataSerializer::Serialize<CreateMonitoredItemsParameters>(const CreateMonitoredItemsParameters& data)
    {
        *this << data.SubscriptionId;
        *this << data.TimestampsToReturn;
        SerializeContainer(*this, data.ItemsToCreate);
    }


    template<>
    void DataSerializer::Serialize<CreateMonitoredItemsRequest>(const CreateMonitoredItemsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CreateMonitoredItemsResult>(const CreateMonitoredItemsResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<CreateMonitoredItemsResponse>(const CreateMonitoredItemsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemModifyParameters>(const MonitoredItemModifyParameters& data)
    {
        *this << data.RequestedParameters;
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemModifyRequest>(const MonitoredItemModifyRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.MonitoredItemId;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemModifyResult>(const MonitoredItemModifyResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.RevisedSamplingInterval;
        *this << data.RevisedQueueSize;
        *this << data.FilterResult;
    }


    template<>
    void DataSerializer::Serialize<ModifyMonitoredItemsParameters>(const ModifyMonitoredItemsParameters& data)
    {
        *this << data.SubscriptionId;
        *this << data.TimestampsToReturn;
        SerializeContainer(*this, data.ItemsToModify);
    }


    template<>
    void DataSerializer::Serialize<ModifyMonitoredItemsRequest>(const ModifyMonitoredItemsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ModifyMonitoredItemsResult>(const ModifyMonitoredItemsResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<ModifyMonitoredItemsResponse>(const ModifyMonitoredItemsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<SetMonitoringModeParameters>(const SetMonitoringModeParameters& data)
    {
        *this << data.SubscriptionId;
        *this << data.MonitoringMode;
        SerializeContainer(*this, data.MonitoredItemIds);
    }


    template<>
    void DataSerializer::Serialize<SetMonitoringModeRequest>(const SetMonitoringModeRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<SetMonitoringModeResult>(const SetMonitoringModeResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<SetMonitoringModeResponse>(const SetMonitoringModeResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<SetTriggeringParameters>(const SetTriggeringParameters& data)
    {
        *this << data.SubscriptionId;
        *this << data.TriggeringItemId;
        SerializeContainer(*this, data.LinksToAdd);
        SerializeContainer(*this, data.LinksToRemove);
    }


    template<>
    void DataSerializer::Serialize<SetTriggeringRequest>(const SetTriggeringRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<SetTriggeringResult>(const SetTriggeringResult& data)
    {
        SerializeContainer(*this, data.AddResults);
        SerializeContainer(*this, data.AddDiagnosticInfos);
        SerializeContainer(*this, data.RemoveResults);
        SerializeContainer(*this, data.RemoveDiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<SetTriggeringResponse>(const SetTriggeringResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteMonitoredItemsParameters>(const DeleteMonitoredItemsParameters& data)
    {
        *this << data.SubscriptionId;
        SerializeContainer(*this, data.MonitoredItemIds);
    }


    template<>
    void DataSerializer::Serialize<DeleteMonitoredItemsRequest>(const DeleteMonitoredItemsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteMonitoredItemsResult>(const DeleteMonitoredItemsResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<DeleteMonitoredItemsResponse>(const DeleteMonitoredItemsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CreateSubscriptionParameters>(const CreateSubscriptionParameters& data)
    {
        *this << data.RequestedPublishingInterval;
        *this << data.RequestedLifetimeCount;
        *this << data.RequestedMaxKeepAliveCount;
        *this << data.MaxNotificationsPerPublish;
        *this << data.PublishingEnabled;
        *this << data.Priority;
    }


    template<>
    void DataSerializer::Serialize<CreateSubscriptionRequest>(const CreateSubscriptionRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<CreateSubscriptionResult>(const CreateSubscriptionResult& data)
    {
        *this << data.SubscriptionId;
        *this << data.RevisedPublishingInterval;
        *this << data.RevisedLifetimeCount;
        *this << data.RevisedMaxKeepAliveCount;
    }


    template<>
    void DataSerializer::Serialize<CreateSubscriptionResponse>(const CreateSubscriptionResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ModifySubscriptionParameters>(const ModifySubscriptionParameters& data)
    {
        *this << data.SubscriptionId;
        *this << data.RequestedPublishingInterval;
        *this << data.RequestedLifetimeCount;
        *this << data.RequestedMaxKeepAliveCount;
        *this << data.MaxNotificationsPerPublish;
        *this << data.Priority;
    }


    template<>
    void DataSerializer::Serialize<ModifySubscriptionRequest>(const ModifySubscriptionRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ModifySubscriptionResult>(const ModifySubscriptionResult& data)
    {
        *this << data.RevisedPublishingInterval;
        *this << data.RevisedLifetimeCount;
        *this << data.RevisedMaxKeepAliveCount;
    }


    template<>
    void DataSerializer::Serialize<ModifySubscriptionResponse>(const ModifySubscriptionResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<SetPublishingModeParameters>(const SetPublishingModeParameters& data)
    {
        *this << data.PublishingEnabled;
        SerializeContainer(*this, data.SubscriptionIds);
    }


    template<>
    void DataSerializer::Serialize<SetPublishingModeRequest>(const SetPublishingModeRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<SetPublishingModeResult>(const SetPublishingModeResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<SetPublishingModeResponse>(const SetPublishingModeResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<NotificationMessage>(const NotificationMessage& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SequenceNumber;
        *this << data.PublishTime;
        SerializeContainer(*this, data.NotificationData);
    }


    template<>
    void DataSerializer::Serialize<NotificationData>(const NotificationData& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        SerializeContainer(*this, data.Body);
    }


    template<>
    void DataSerializer::Serialize<MonitoredItemNotification>(const MonitoredItemNotification& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ClientHandle;
        *this << data.Value;
    }


    template<>
    void DataSerializer::Serialize<DataChangeNotification>(const DataChangeNotification& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.MonitoredItems);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<EventFieldList>(const EventFieldList& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ClientHandle;
        SerializeContainer(*this, data.EventFields);
    }


    template<>
    void DataSerializer::Serialize<EventNotificationList>(const EventNotificationList& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.Events);
    }


    template<>
    void DataSerializer::Serialize<HistoryEventFieldList>(const HistoryEventFieldList& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.EventFields);
    }


    template<>
    void DataSerializer::Serialize<HistoryEvent>(const HistoryEvent& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.Events);
    }


    template<>
    void DataSerializer::Serialize<UpdateEventDetails>(const UpdateEventDetails& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NodeId;
        *this << data.PerformInsertReplace;
        *this << data.Filter;
        SerializeContainer(*this, data.EventData);
    }


    template<>
    void DataSerializer::Serialize<StatusChangeNotification>(const StatusChangeNotification& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.DiagnosticInfo;
    }


    template<>
    void DataSerializer::Serialize<SubscriptionAcknowledgement>(const SubscriptionAcknowledgement& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SubscriptionId;
        *this << data.SequenceNumber;
    }


    template<>
    void DataSerializer::Serialize<PublishParameters>(const PublishParameters& data)
    {
        SerializeContainer(*this, data.SubscriptionAcknowledgements);
    }


    template<>
    void DataSerializer::Serialize<PublishRequest>(const PublishRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<PublishResult>(const PublishResult& data)
    {
        *this << data.SubscriptionId;
        SerializeContainer(*this, data.AvailableSequenceNumbers);
        *this << data.MoreNotifications;
        *this << data.NotificationMessage;
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<PublishResponse>(const PublishResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<RepublishParameters>(const RepublishParameters& data)
    {
        *this << data.SubscriptionId;
        *this << data.RetransmitSequenceNumber;
    }


    template<>
    void DataSerializer::Serialize<RepublishRequest>(const RepublishRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<RepublishResult>(const RepublishResult& data)
    {
        *this << data.NotificationMessage;
    }


    template<>
    void DataSerializer::Serialize<RepublishResponse>(const RepublishResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<TransferResult>(const TransferResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        SerializeContainer(*this, data.AvailableSequenceNumbers);
    }


    template<>
    void DataSerializer::Serialize<TransferSubscriptionsParameters>(const TransferSubscriptionsParameters& data)
    {
        SerializeContainer(*this, data.SubscriptionIds);
        *this << data.SendInitialValues;
    }


    template<>
    void DataSerializer::Serialize<TransferSubscriptionsRequest>(const TransferSubscriptionsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<TransferSubscriptionsResult>(const TransferSubscriptionsResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<TransferSubscriptionsResponse>(const TransferSubscriptionsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteSubscriptionsParameters>(const DeleteSubscriptionsParameters& data)
    {
        SerializeContainer(*this, data.SubscriptionIds);
    }


    template<>
    void DataSerializer::Serialize<DeleteSubscriptionsRequest>(const DeleteSubscriptionsRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<DeleteSubscriptionsResult>(const DeleteSubscriptionsResult& data)
    {
        SerializeContainer(*this, data.Results);
        SerializeContainer(*this, data.DiagnosticInfos);
    }


    template<>
    void DataSerializer::Serialize<DeleteSubscriptionsResponse>(const DeleteSubscriptionsResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<ScalarTestType>(const ScalarTestType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Boolean;
        *this << data.SByte;
        *this << data.Byte;
        *this << data.Int16;
        *this << data.UInt16;
        *this << data.Int32;
        *this << data.UInt32;
        *this << data.Int64;
        *this << data.UInt64;
        *this << data.Float;
        *this << data.Double;
        *this << data.String;
        *this << data.DateTime;
        *this << data.Guid;
        *this << data.ByteString;
        *this << data.XmlElement;
        *this << data.NodeId;
        *this << data.ExpandedNodeId;
        *this << data.Status;
        *this << data.DiagnosticInfo;
        *this << data.QualifiedName;
        *this << data.LocalizedText;
        *this << data.ExtensionObject;
        *this << data.DataValue;
        *this << data.EnumeratedValue;
    }


    template<>
    void DataSerializer::Serialize<ArrayTestType>(const ArrayTestType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.Booleans);
        SerializeContainer(*this, data.SBytes);
        SerializeContainer(*this, data.Int16s);
        SerializeContainer(*this, data.UInt16s);
        SerializeContainer(*this, data.Int32s);
        SerializeContainer(*this, data.UInt32s);
        SerializeContainer(*this, data.Int64s);
        SerializeContainer(*this, data.UInt64s);
        SerializeContainer(*this, data.Floats);
        SerializeContainer(*this, data.Doubles);
        SerializeContainer(*this, data.Strings);
        SerializeContainer(*this, data.DateTimes);
        SerializeContainer(*this, data.Guids);
        SerializeContainer(*this, data.ByteStrings);
        SerializeContainer(*this, data.XmlElements);
        SerializeContainer(*this, data.NodeIds);
        SerializeContainer(*this, data.ExpandedNodeIds);
        SerializeContainer(*this, data.StatusCodes);
        SerializeContainer(*this, data.DiagnosticInfos);
        SerializeContainer(*this, data.QualifiedNames);
        SerializeContainer(*this, data.LocalizedTexts);
        SerializeContainer(*this, data.ExtensionObjects);
        SerializeContainer(*this, data.DataValues);
        SerializeContainer(*this, data.Variants);
        SerializeContainer(*this, data.EnumeratedValues);
    }


    template<>
    void DataSerializer::Serialize<CompositeTestType>(const CompositeTestType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Field1;
        *this << data.Field2;
    }


    template<>
    void DataSerializer::Serialize<TestStackParameters>(const TestStackParameters& data)
    {
        *this << data.TestId;
        *this << data.Iteration;
        *this << data.Input;
    }


    template<>
    void DataSerializer::Serialize<TestStackRequest>(const TestStackRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<TestStackResult>(const TestStackResult& data)
    {
        *this << data.Output;
    }


    template<>
    void DataSerializer::Serialize<TestStackResponse>(const TestStackResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<TestStackExParameters>(const TestStackExParameters& data)
    {
        *this << data.TestId;
        *this << data.Iteration;
        *this << data.Input;
    }


    template<>
    void DataSerializer::Serialize<TestStackExRequest>(const TestStackExRequest& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<TestStackExResult>(const TestStackExResult& data)
    {
        *this << data.Output;
    }


    template<>
    void DataSerializer::Serialize<TestStackExResponse>(const TestStackExResponse& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Header;
        *this << data.Parameters;
    }


    template<>
    void DataSerializer::Serialize<BuildInfo>(const BuildInfo& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ProductUri;
        *this << data.ManufacturerName;
        *this << data.ProductName;
        *this << data.SoftwareVersion;
        *this << data.BuildNumber;
        *this << data.BuildDate;
    }


    template<>
    void DataSerializer::Serialize<RedundantServerDataType>(const RedundantServerDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ServerId;
        *this << data.ServiceLevel;
        *this << data.ServerState;
    }


    template<>
    void DataSerializer::Serialize<EndpointUrlListDataType>(const EndpointUrlListDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        SerializeContainer(*this, data.EndpointUrlList);
    }


    template<>
    void DataSerializer::Serialize<NetworkGroupDataType>(const NetworkGroupDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ServerUri;
        SerializeContainer(*this, data.NetworkPaths);
    }


    template<>
    void DataSerializer::Serialize<SamplingIntervalDiagnosticsDataType>(const SamplingIntervalDiagnosticsDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SamplingInterval;
        *this << data.MonitoredItemCount;
        *this << data.MaxMonitoredItemCount;
        *this << data.DisabledMonitoredItemCount;
    }


    template<>
    void DataSerializer::Serialize<ServerDiagnosticsSummaryDataType>(const ServerDiagnosticsSummaryDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.ServerViewCount;
        *this << data.CurrentSessionCount;
        *this << data.CumulatedSessionCount;
        *this << data.SecurityRejectedSessionCount;
        *this << data.RejectedSessionCount;
        *this << data.SessionTimeoutCount;
        *this << data.SessionAbortCount;
        *this << data.CurrentSubscriptionCount;
        *this << data.CumulatedSubscriptionCount;
        *this << data.PublishingIntervalCount;
        *this << data.SecurityRejectedRequestsCount;
        *this << data.RejectedRequestsCount;
    }


    template<>
    void DataSerializer::Serialize<ServerStatusDataType>(const ServerStatusDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.StartTime;
        *this << data.CurrentTime;
        *this << data.State;
        *this << data.BuildInfo;
        *this << data.SecondsTillShutdown;
        *this << data.ShutdownReason;
    }


    template<>
    void DataSerializer::Serialize<SessionSecurityDiagnosticsDataType>(const SessionSecurityDiagnosticsDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SessionId;
        *this << data.ClientUserIdOfSession;
        SerializeContainer(*this, data.ClientUserIdHistory);
        *this << data.AuthenticationMechanism;
        *this << data.TransportProtocol;
        *this << data.SecurityMode;
        *this << data.SecurityPolicyUri;
        *this << data.ClientCertificate;
    }


    template<>
    void DataSerializer::Serialize<ServiceCounterDataType>(const ServiceCounterDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.TotalCount;
        *this << data.ErrorCount;
    }


    template<>
    void DataSerializer::Serialize<SessionDiagnosticsDataType>(const SessionDiagnosticsDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SessionId;
        *this << data.SessionName;
        *this << data.ClientDescription;
        *this << data.ServerUri;
        *this << data.EndpointUrl;
        SerializeContainer(*this, data.LocaleIds);
        *this << data.ActualSessionTimeout;
        *this << data.MaxResponseMessageSize;
        *this << data.ClientConnectionTime;
        *this << data.ClientLastContactTime;
        *this << data.CurrentSubscriptionsCount;
        *this << data.CurrentMonitoredItemsCount;
        *this << data.CurrentPublishRequestsInQueue;
        *this << data.TotalRequestCount;
        *this << data.UnauthorizedRequestCount;
        *this << data.ReadCount;
        *this << data.HistoryReadCount;
        *this << data.WriteCount;
        *this << data.HistoryUpdateCount;
        *this << data.CallCount;
        *this << data.CreateMonitoredItemsCount;
        *this << data.ModifyMonitoredItemsCount;
        *this << data.SetMonitoringModeCount;
        *this << data.SetTriggeringCount;
        *this << data.DeleteMonitoredItemsCount;
        *this << data.CreateSubscriptionCount;
        *this << data.ModifySubscriptionCount;
        *this << data.SetPublishingModeCount;
        *this << data.PublishCount;
        *this << data.RepublishCount;
        *this << data.TransferSubscriptionsCount;
        *this << data.DeleteSubscriptionsCount;
        *this << data.AddNodesCount;
        *this << data.AddReferencesCount;
        *this << data.DeleteNodesCount;
        *this << data.DeleteReferencesCount;
        *this << data.BrowseCount;
        *this << data.BrowseNextCount;
        *this << data.TranslateBrowsePathsToNodeIdsCount;
        *this << data.QueryFirstCount;
        *this << data.QueryNextCount;
        *this << data.RegisterNodesCount;
        *this << data.UnregisterNodesCount;
    }


    template<>
    void DataSerializer::Serialize<StatusResult>(const StatusResult& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Status;
        *this << data.DiagnosticInfo;
    }


    template<>
    void DataSerializer::Serialize<SubscriptionDiagnosticsDataType>(const SubscriptionDiagnosticsDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.SessionId;
        *this << data.SubscriptionId;
        *this << data.Priority;
        *this << data.PublishingInterval;
        *this << data.MaxKeepAliveCount;
        *this << data.MaxLifetimeCount;
        *this << data.MaxNotificationsPerPublish;
        *this << data.PublishingEnabled;
        *this << data.ModifyCount;
        *this << data.EnableCount;
        *this << data.DisableCount;
        *this << data.RepublishRequestCount;
        *this << data.RepublishMessageRequestCount;
        *this << data.RepublishMessageCount;
        *this << data.TransferRequestCount;
        *this << data.TransferredToAltClientCount;
        *this << data.TransferredToSameClientCount;
        *this << data.PublishRequestCount;
        *this << data.DataChangeNotificationsCount;
        *this << data.EventNotificationsCount;
        *this << data.NotificationsCount;
        *this << data.LatePublishRequestCount;
        *this << data.CurrentKeepAliveCount;
        *this << data.CurrentLifetimeCount;
        *this << data.UnacknowledgedMessageCount;
        *this << data.DiscardedMessageCount;
        *this << data.MonitoredItemCount;
        *this << data.DisabledMonitoredItemCount;
        *this << data.MonitoringQueueOverflowCount;
        *this << data.NextSequenceNumber;
        *this << data.EventQueueOverFlowCount;
    }


    template<>
    void DataSerializer::Serialize<ModelChangeStructureDataType>(const ModelChangeStructureDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Affected;
        *this << data.AffectedType;
        *this << data.Verb;
    }


    template<>
    void DataSerializer::Serialize<SemanticChangeStructureDataType>(const SemanticChangeStructureDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Affected;
        *this << data.AffectedType;
    }


    template<>
    void DataSerializer::Serialize<Range>(const Range& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Low;
        *this << data.High;
    }


    template<>
    void DataSerializer::Serialize<EUInformation>(const EUInformation& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.NamespaceUri;
        *this << data.UnitId;
        *this << data.DisplayName;
        *this << data.Description;
    }


    template<>
    void DataSerializer::Serialize<ComplexNumberType>(const ComplexNumberType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Real;
        *this << data.Imaginary;
    }


    template<>
    void DataSerializer::Serialize<DoubleComplexNumberType>(const DoubleComplexNumberType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Real;
        *this << data.Imaginary;
    }


    template<>
    void DataSerializer::Serialize<AxisInformation>(const AxisInformation& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.EngineeringUnits;
        *this << data.EURange;
        *this << data.Title;
        *this << data.AxisScaleType;
        SerializeContainer(*this, data.AxisSteps);
    }


    template<>
    void DataSerializer::Serialize<XVType>(const XVType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.X;
        *this << data.Value;
    }


    template<>
    void DataSerializer::Serialize<ProgramDiagnosticDataType>(const ProgramDiagnosticDataType& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.CreateSessionId;
        *this << data.CreateClientName;
        *this << data.InvocationCreationTime;
        *this << data.LastTransitionTime;
        *this << data.LastMethodCall;
        *this << data.LastMethodSessionId;
        SerializeContainer(*this, data.LastMethodInputArguments);
        SerializeContainer(*this, data.LastMethodOutputArguments);
        *this << data.LastMethodCallTime;
        *this << data.LastMethodReturnStatus;
    }


    template<>
    void DataSerializer::Serialize<Annotation>(const Annotation& data)
    {
        *this << data.Encoding;
        if ((data.Encoding) & (1<<(0))) *this << data.TypeId;
        int32_t bodylength = RawSize(data) - RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) bodylength -= RawSize(data.TypeId);
        *this << bodylength;
        *this << data.Message;
        *this << data.UserName;
        *this << data.AnnotationTime;
    }


   }

} // namespace
    
