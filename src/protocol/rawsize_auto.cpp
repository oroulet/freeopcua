// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

/// @author Olivier Roulet-Dubonnet 
/// @email olivier@sintef.no 
/// @brief Opc Ua Binary. 
/// @license GNU LGPL
///
/// Distributed under the GNU LGPL License
/// (See accompanying file LICENSE or copy at
/// http://www.gnu.org/licenses/lgpl.html)
///

#include "binary_serialization.h"
#include <opc/ua/protocol/protocol.h>

#include <opc/ua/protocol/binary/stream.h>

namespace OpcUa
{   
    namespace Binary
    {

    template<>
    std::size_t RawSize<XmlElement>(const XmlElement& data)
    {
        return RawSize(data.Length) + RawSizeContainer(data.Value);
    }


    template<>
    std::size_t RawSize<DiagnosticInfo>(const DiagnosticInfo& data)
    {
        return RawSize(data.Encoding) + RawSize(data.SymbolicId) + RawSize(data.NamespaceURI) + RawSize(data.LocalizedText) + RawSize(data.AdditionalInfo) + RawSize(data.InnerStatusCode) + RawSize(*data.InnerDiagnosticInfo);
    }


    template<>
    std::size_t RawSize<ExtensionObject>(const ExtensionObject& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.Body);
    }


    template<>
    std::size_t RawSize<Argument>(const Argument& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Name) + RawSize(data.DataType) + RawSize(data.ValueRank) + RawSizeContainer(data.ArrayDimensions) + RawSize(data.Description);
    }


    template<>
    std::size_t RawSize<EnumValueType>(const EnumValueType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Value) + RawSize(data.DisplayName) + RawSize(data.Description);
    }


    template<>
    std::size_t RawSize<TimeZoneDataType>(const TimeZoneDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Offset) + RawSize(data.DaylightSavingInOffset);
    }


    template<>
    std::size_t RawSize<ApplicationDescription>(const ApplicationDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ApplicationUri) + RawSize(data.ProductUri) + RawSize(data.ApplicationName) + RawSize(data.ApplicationType) + RawSize(data.GatewayServerUri) + RawSize(data.DiscoveryProfileUri) + RawSizeContainer(data.DiscoveryUrls);
    }


    template<>
    std::size_t RawSize<RequestHeader>(const RequestHeader& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.AuthenticationToken) + RawSize(data.Timestamp) + RawSize(data.RequestHandle) + RawSize(data.ReturnDiagnostics) + RawSize(data.AuditEntryId) + RawSize(data.TimeoutHint) + RawSize(data.AdditionalHeader);
    }


    template<>
    std::size_t RawSize<ResponseHeader>(const ResponseHeader& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Timestamp) + RawSize(data.RequestHandle) + RawSize(data.ServiceResult) + RawSize(data.ServiceDiagnostics) + RawSizeContainer(data.StringTable) + RawSize(data.AdditionalHeader);
    }


    template<>
    std::size_t RawSize<ServiceFault>(const ServiceFault& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Header);
    }


    template<>
    std::size_t RawSize<FindServersParameters>(const FindServersParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.EndpointUrl) + RawSizeContainer(data.LocaleIds) + RawSizeContainer(data.ServerUris);
    }


    template<>
    std::size_t RawSize<FindServersRequest>(const FindServersRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<FindServersData>(const FindServersData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Servers);
    }


    template<>
    std::size_t RawSize<FindServersResponse>(const FindServersResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<UserTokenPolicy>(const UserTokenPolicy& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.PolicyId) + RawSize(data.TokenType) + RawSize(data.IssuedTokenType) + RawSize(data.IssuerEndpointUrl) + RawSize(data.SecurityPolicyUri);
    }


    template<>
    std::size_t RawSize<EndpointDescription>(const EndpointDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.EndpointUrl) + RawSize(data.Server) + RawSize(data.ServerCertificate) + RawSize(data.SecurityMode) + RawSize(data.SecurityPolicyUri) + RawSizeContainer(data.UserIdentityTokens) + RawSize(data.TransportProfileUri) + RawSize(data.SecurityLevel);
    }


    template<>
    std::size_t RawSize<GetEndpointsParameters>(const GetEndpointsParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.EndpointUrl) + RawSizeContainer(data.LocaleIds) + RawSizeContainer(data.ProfileUris);
    }


    template<>
    std::size_t RawSize<GetEndpointsRequest>(const GetEndpointsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<GetEndpointsResponse>(const GetEndpointsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Header) + RawSizeContainer(data.Endpoints);
    }


    template<>
    std::size_t RawSize<RegisteredServer>(const RegisteredServer& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ServerUri) + RawSize(data.ProductUri) + RawSizeContainer(data.ServerNames) + RawSize(data.ServerType) + RawSize(data.GatewayServerUri) + RawSizeContainer(data.DiscoveryUrls) + RawSize(data.SemaphoreFilePath) + RawSize(data.IsOnline);
    }


    template<>
    std::size_t RawSize<RegisterServerParameters>(const RegisterServerParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.Server);
    }


    template<>
    std::size_t RawSize<RegisterServerRequest>(const RegisterServerRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<RegisterServerData>(const RegisterServerData& data)
    {
        return RawSize(data.Header);
    }


    template<>
    std::size_t RawSize<RegisterServerResponse>(const RegisterServerResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ChannelSecurityToken>(const ChannelSecurityToken& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ChannelId) + RawSize(data.TokenId) + RawSize(data.CreatedAt) + RawSize(data.RevisedLifetime);
    }


    template<>
    std::size_t RawSize<OpenSecureChannelParameters>(const OpenSecureChannelParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.ClientProtocolVersion) + RawSize(data.RequestType) + RawSize(data.SecurityMode) + RawSize(data.ClientNonce) + RawSize(data.RequestedLifetime);
    }


    template<>
    std::size_t RawSize<OpenSecureChannelRequest>(const OpenSecureChannelRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<OpenSecureChannelData>(const OpenSecureChannelData& data)
    {
        return RawSize(data.Header) + RawSize(data.ServerProtocolVersion) + RawSize(data.SecurityToken) + RawSize(data.ServerNonce);
    }


    template<>
    std::size_t RawSize<OpenSecureChannelResponse>(const OpenSecureChannelResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CloseSecureChannelParameters>(const CloseSecureChannelParameters& data)
    {
        return RawSize(data.Header);
    }


    template<>
    std::size_t RawSize<CloseSecureChannelRequest>(const CloseSecureChannelRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CloseSecureChannelData>(const CloseSecureChannelData& data)
    {
        return RawSize(data.Header);
    }


    template<>
    std::size_t RawSize<CloseSecureChannelResponse>(const CloseSecureChannelResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SignedSoftwareCertificate>(const SignedSoftwareCertificate& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.CertificateData) + RawSize(data.Signature);
    }


    template<>
    std::size_t RawSize<SignatureData>(const SignatureData& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Algorithm) + RawSize(data.Signature);
    }


    template<>
    std::size_t RawSize<CreateSessionParameters>(const CreateSessionParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.ClientDescription) + RawSize(data.ServerUri) + RawSize(data.EndpointUrl) + RawSize(data.SessionName) + RawSize(data.ClientNonce) + RawSize(data.ClientCertificate) + RawSize(data.RequestedSessionTimeout) + RawSize(data.MaxResponseMessageSize);
    }


    template<>
    std::size_t RawSize<CreateSessionRequest>(const CreateSessionRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CreateSessionData>(const CreateSessionData& data)
    {
        return RawSize(data.Header) + RawSize(data.SessionId) + RawSize(data.AuthenticationToken) + RawSize(data.RevisedSessionTimeout) + RawSize(data.ServerNonce) + RawSize(data.ServerCertificate) + RawSizeContainer(data.ServerEndpoints) + RawSizeContainer(data.ServerSoftwareCertificates) + RawSize(data.ServerSignature) + RawSize(data.MaxRequestMessageSize);
    }


    template<>
    std::size_t RawSize<CreateSessionResponse>(const CreateSessionResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<UserIdentityToken>(const UserIdentityToken& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.PolicyId);
    }


    template<>
    std::size_t RawSize<AnonymousIdentityToken>(const AnonymousIdentityToken& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.PolicyId);
    }


    template<>
    std::size_t RawSize<UserNameIdentityToken>(const UserNameIdentityToken& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.PolicyId) + RawSize(data.UserName) + RawSize(data.Password) + RawSize(data.EncryptionAlgorithm);
    }


    template<>
    std::size_t RawSize<X509IdentityToken>(const X509IdentityToken& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.PolicyId) + RawSize(data.CertificateData);
    }


    template<>
    std::size_t RawSize<IssuedIdentityToken>(const IssuedIdentityToken& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.PolicyId) + RawSize(data.TokenData) + RawSize(data.EncryptionAlgorithm);
    }


    template<>
    std::size_t RawSize<ActivateSessionParameters>(const ActivateSessionParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.ClientSignature) + RawSizeContainer(data.ClientSoftwareCertificates) + RawSizeContainer(data.LocaleIds) + RawSize(data.UserIdentityToken) + RawSize(data.UserTokenSignature);
    }


    template<>
    std::size_t RawSize<ActivateSessionRequest>(const ActivateSessionRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ActivateSessionData>(const ActivateSessionData& data)
    {
        return RawSize(data.Header) + RawSize(data.ServerNonce) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<ActivateSessionResponse>(const ActivateSessionResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CloseSessionParameters>(const CloseSessionParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.DeleteSubscriptions);
    }


    template<>
    std::size_t RawSize<CloseSessionRequest>(const CloseSessionRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CloseSessionData>(const CloseSessionData& data)
    {
        return RawSize(data.Header);
    }


    template<>
    std::size_t RawSize<CloseSessionResponse>(const CloseSessionResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CancelParameters>(const CancelParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.RequestHandle);
    }


    template<>
    std::size_t RawSize<CancelRequest>(const CancelRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CancelData>(const CancelData& data)
    {
        return RawSize(data.Header) + RawSize(data.CancelCount);
    }


    template<>
    std::size_t RawSize<CancelResponse>(const CancelResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<NodeAttributes>(const NodeAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask);
    }


    template<>
    std::size_t RawSize<ObjectAttributes>(const ObjectAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.EventNotifier);
    }


    template<>
    std::size_t RawSize<VariableAttributes>(const VariableAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.Value) + RawSize(data.DataType) + RawSize(data.ValueRank) + RawSizeContainer(data.ArrayDimensions) + RawSize(data.AccessLevel) + RawSize(data.UserAccessLevel) + RawSize(data.MinimumSamplingInterval) + RawSize(data.Historizing);
    }


    template<>
    std::size_t RawSize<MethodAttributes>(const MethodAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.Executable) + RawSize(data.UserExecutable);
    }


    template<>
    std::size_t RawSize<ObjectTypeAttributes>(const ObjectTypeAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.IsAbstract);
    }


    template<>
    std::size_t RawSize<VariableTypeAttributes>(const VariableTypeAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.Value) + RawSize(data.DataType) + RawSize(data.ValueRank) + RawSizeContainer(data.ArrayDimensions) + RawSize(data.IsAbstract);
    }


    template<>
    std::size_t RawSize<ReferenceTypeAttributes>(const ReferenceTypeAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.IsAbstract) + RawSize(data.Symmetric) + RawSize(data.InverseName);
    }


    template<>
    std::size_t RawSize<DataTypeAttributes>(const DataTypeAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.IsAbstract);
    }


    template<>
    std::size_t RawSize<ViewAttributes>(const ViewAttributes& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SpecifiedAttributes) + RawSize(data.DisplayName) + RawSize(data.Description) + RawSize(data.WriteMask) + RawSize(data.UserWriteMask) + RawSize(data.ContainsNoLoops) + RawSize(data.EventNotifier);
    }


    template<>
    std::size_t RawSize<AddNodesItem>(const AddNodesItem& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ParentNodeId) + RawSize(data.ReferenceTypeId) + RawSize(data.RequestedNewNodeId) + RawSize(data.BrowseName) + RawSize(data.NodeClass) + RawSize(data.NodeAttributes) + RawSize(data.TypeDefinition);
    }


    template<>
    std::size_t RawSize<AddNodesResult>(const AddNodesResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.AddedNodeId);
    }


    template<>
    std::size_t RawSize<AddNodesParameters>(const AddNodesParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.NodesToAdd);
    }


    template<>
    std::size_t RawSize<AddNodesRequest>(const AddNodesRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<AddNodesData>(const AddNodesData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<AddNodesResponse>(const AddNodesResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<AddReferencesItem>(const AddReferencesItem& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SourceNodeId) + RawSize(data.ReferenceTypeId) + RawSize(data.IsForward) + RawSize(data.TargetServerUri) + RawSize(data.TargetNodeId) + RawSize(data.TargetNodeClass);
    }


    template<>
    std::size_t RawSize<AddReferencesParameters>(const AddReferencesParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.ReferencesToAdd);
    }


    template<>
    std::size_t RawSize<AddReferencesRequest>(const AddReferencesRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<AddReferencesData>(const AddReferencesData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<AddReferencesResponse>(const AddReferencesResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteNodesItem>(const DeleteNodesItem& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.DeleteTargetReferences);
    }


    template<>
    std::size_t RawSize<DeleteNodesParameters>(const DeleteNodesParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.NodesToDelete);
    }


    template<>
    std::size_t RawSize<DeleteNodesRequest>(const DeleteNodesRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteNodesData>(const DeleteNodesData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<DeleteNodesResponse>(const DeleteNodesResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteReferencesItem>(const DeleteReferencesItem& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SourceNodeId) + RawSize(data.ReferenceTypeId) + RawSize(data.IsForward) + RawSize(data.TargetNodeId) + RawSize(data.DeleteBidirectional);
    }


    template<>
    std::size_t RawSize<DeleteReferencesParameters>(const DeleteReferencesParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.ReferencesToDelete);
    }


    template<>
    std::size_t RawSize<DeleteReferencesRequest>(const DeleteReferencesRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteReferencesData>(const DeleteReferencesData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<DeleteReferencesResponse>(const DeleteReferencesResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ViewDescription>(const ViewDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ViewId) + RawSize(data.Timestamp) + RawSize(data.ViewVersion);
    }


    template<>
    std::size_t RawSize<BrowseDescription>(const BrowseDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.BrowseDirection) + RawSize(data.ReferenceTypeId) + RawSize(data.IncludeSubtypes) + RawSize(data.NodeClassMask) + RawSize(data.ResultMask);
    }


    template<>
    std::size_t RawSize<ReferenceDescription>(const ReferenceDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ReferenceTypeId) + RawSize(data.IsForward) + RawSize(data.NodeId) + RawSize(data.BrowseName) + RawSize(data.DisplayName) + RawSize(data.NodeClass) + RawSize(data.TypeDefinition);
    }


    template<>
    std::size_t RawSize<BrowseResult>(const BrowseResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.ContinuationPoint) + RawSizeContainer(data.References);
    }


    template<>
    std::size_t RawSize<BrowseParameters>(const BrowseParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.View) + RawSize(data.RequestedMaxReferencesPerNode) + RawSizeContainer(data.NodesToBrowse);
    }


    template<>
    std::size_t RawSize<BrowseRequest>(const BrowseRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<BrowseData>(const BrowseData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<BrowseResponse>(const BrowseResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<BrowseNextParameters>(const BrowseNextParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.ReleaseContinuationPoints) + RawSizeContainer(data.ContinuationPoints);
    }


    template<>
    std::size_t RawSize<BrowseNextRequest>(const BrowseNextRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<BrowseNextData>(const BrowseNextData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<BrowseNextResponse>(const BrowseNextResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<RelativePathElement>(const RelativePathElement& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ReferenceTypeId) + RawSize(data.IsInverse) + RawSize(data.IncludeSubtypes) + RawSize(data.TargetName);
    }


    template<>
    std::size_t RawSize<RelativePath>(const RelativePath& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.Elements);
    }


    template<>
    std::size_t RawSize<BrowsePath>(const BrowsePath& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.StartingNode) + RawSize(data.RelativePath);
    }


    template<>
    std::size_t RawSize<BrowsePathTarget>(const BrowsePathTarget& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.TargetId) + RawSize(data.RemainingPathIndex);
    }


    template<>
    std::size_t RawSize<BrowsePathResult>(const BrowsePathResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSizeContainer(data.Targets);
    }


    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsParameters>(const TranslateBrowsePathsToNodeIdsParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.BrowsePaths);
    }


    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsRequest>(const TranslateBrowsePathsToNodeIdsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsData>(const TranslateBrowsePathsToNodeIdsData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsResponse>(const TranslateBrowsePathsToNodeIdsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<RegisterNodesParameters>(const RegisterNodesParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.NodesToRegister);
    }


    template<>
    std::size_t RawSize<RegisterNodesRequest>(const RegisterNodesRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<RegisterNodesData>(const RegisterNodesData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.RegisteredNodeIds);
    }


    template<>
    std::size_t RawSize<RegisterNodesResponse>(const RegisterNodesResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<UnregisterNodesParameters>(const UnregisterNodesParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.NodesToUnregister);
    }


    template<>
    std::size_t RawSize<UnregisterNodesRequest>(const UnregisterNodesRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<UnregisterNodesData>(const UnregisterNodesData& data)
    {
        return RawSize(data.Header);
    }


    template<>
    std::size_t RawSize<UnregisterNodesResponse>(const UnregisterNodesResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<EndpointConfiguration>(const EndpointConfiguration& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.OperationTimeout) + RawSize(data.UseBinaryEncoding) + RawSize(data.MaxStringLength) + RawSize(data.MaxByteStringLength) + RawSize(data.MaxArrayLength) + RawSize(data.MaxMessageSize) + RawSize(data.MaxBufferSize) + RawSize(data.ChannelLifetime) + RawSize(data.SecurityTokenLifetime);
    }


    template<>
    std::size_t RawSize<SupportedProfile>(const SupportedProfile& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.OrganizationUri) + RawSize(data.ProfileId) + RawSize(data.ComplianceTool) + RawSize(data.ComplianceDate) + RawSize(data.ComplianceLevel) + RawSizeContainer(data.UnsupportedUnitIds);
    }


    template<>
    std::size_t RawSize<SoftwareCertificate>(const SoftwareCertificate& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ProductName) + RawSize(data.ProductUri) + RawSize(data.VendorName) + RawSize(data.VendorProductCertificate) + RawSize(data.SoftwareVersion) + RawSize(data.BuildNumber) + RawSize(data.BuildDate) + RawSize(data.IssuedBy) + RawSize(data.IssueDate) + RawSizeContainer(data.SupportedProfiles);
    }


    template<>
    std::size_t RawSize<QueryDataDescription>(const QueryDataDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.RelativePath) + RawSize(data.AttributeId) + RawSize(data.IndexRange);
    }


    template<>
    std::size_t RawSize<NodeTypeDescription>(const NodeTypeDescription& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.TypeDefinitionNode) + RawSize(data.IncludeSubTypes) + RawSizeContainer(data.DataToReturn);
    }


    template<>
    std::size_t RawSize<QueryDataSet>(const QueryDataSet& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.NodeId) + RawSize(data.TypeDefinitionNode) + RawSizeContainer(data.Values);
    }


    template<>
    std::size_t RawSize<NodeReference>(const NodeReference& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.ReferenceTypeId) + RawSize(data.IsForward) + RawSizeContainer(data.ReferencedNodeIds);
    }


    template<>
    std::size_t RawSize<ContentFilterElement>(const ContentFilterElement& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.FilterOperator) + RawSizeContainer(data.FilterOperands);
    }


    template<>
    std::size_t RawSize<ContentFilter>(const ContentFilter& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.Elements);
    }


    template<>
    std::size_t RawSize<FilterOperand>(const FilterOperand& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength);
    }


    template<>
    std::size_t RawSize<ElementOperand>(const ElementOperand& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Index);
    }


    template<>
    std::size_t RawSize<LiteralOperand>(const LiteralOperand& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Value);
    }


    template<>
    std::size_t RawSize<AttributeOperand>(const AttributeOperand& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.Alias) + RawSize(data.BrowsePath) + RawSize(data.AttributeId) + RawSize(data.IndexRange);
    }


    template<>
    std::size_t RawSize<SimpleAttributeOperand>(const SimpleAttributeOperand& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.TypeDefinitionId) + RawSizeContainer(data.BrowsePath) + RawSize(data.AttributeId) + RawSize(data.IndexRange);
    }


    template<>
    std::size_t RawSize<ContentFilterElementResult>(const ContentFilterElementResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSizeContainer(data.OperandStatusCodes) + RawSizeContainer(data.OperandDiagnosticInfos);
    }


    template<>
    std::size_t RawSize<ContentFilterResult>(const ContentFilterResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.ElementResults) + RawSizeContainer(data.ElementDiagnosticInfos);
    }


    template<>
    std::size_t RawSize<ParsingResult>(const ParsingResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSizeContainer(data.DataStatusCodes) + RawSizeContainer(data.DataDiagnosticInfos);
    }


    template<>
    std::size_t RawSize<QueryFirstParameters>(const QueryFirstParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.View) + RawSizeContainer(data.NodeTypes) + RawSize(data.Filter) + RawSize(data.MaxDataSetsToReturn) + RawSize(data.MaxReferencesToReturn);
    }


    template<>
    std::size_t RawSize<QueryFirstRequest>(const QueryFirstRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<QueryFirstData>(const QueryFirstData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.QueryDataSets) + RawSize(data.ContinuationPoint) + RawSizeContainer(data.ParsingResults) + RawSizeContainer(data.DiagnosticInfos) + RawSize(data.FilterResult);
    }


    template<>
    std::size_t RawSize<QueryFirstResponse>(const QueryFirstResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<QueryNextParameters>(const QueryNextParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.ReleaseContinuationPoint) + RawSize(data.ContinuationPoint);
    }


    template<>
    std::size_t RawSize<QueryNextRequest>(const QueryNextRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<QueryNextData>(const QueryNextData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.QueryDataSets) + RawSize(data.RevisedContinuationPoint);
    }


    template<>
    std::size_t RawSize<QueryNextResponse>(const QueryNextResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ReadValueId>(const ReadValueId& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.AttributeId) + RawSize(data.IndexRange) + RawSize(data.DataEncoding);
    }


    template<>
    std::size_t RawSize<ReadParameters>(const ReadParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.MaxAge) + RawSize(data.TimestampsToReturn) + RawSizeContainer(data.NodesToRead);
    }


    template<>
    std::size_t RawSize<ReadRequest>(const ReadRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ReadData>(const ReadData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<ReadResponse>(const ReadResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<HistoryReadValueId>(const HistoryReadValueId& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.IndexRange) + RawSize(data.DataEncoding) + RawSize(data.ContinuationPoint);
    }


    template<>
    std::size_t RawSize<HistoryReadResult>(const HistoryReadResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.ContinuationPoint) + RawSize(data.HistoryData);
    }


    template<>
    std::size_t RawSize<HistoryReadDetails>(const HistoryReadDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength);
    }


    template<>
    std::size_t RawSize<ReadRawModifiedDetails>(const ReadRawModifiedDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.IsReadModified) + RawSize(data.StartTime) + RawSize(data.EndTime) + RawSize(data.NumValuesPerNode) + RawSize(data.ReturnBounds);
    }


    template<>
    std::size_t RawSize<ReadAtTimeDetails>(const ReadAtTimeDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.ReqTimes) + RawSize(data.UseSimpleBounds);
    }


    template<>
    std::size_t RawSize<HistoryData>(const HistoryData& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.DataValues);
    }


    template<>
    std::size_t RawSize<ModificationInfo>(const ModificationInfo& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ModificationTime) + RawSize(data.UpdateType) + RawSize(data.UserName);
    }


    template<>
    std::size_t RawSize<HistoryModifiedData>(const HistoryModifiedData& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.DataValues) + RawSizeContainer(data.ModificationInfos);
    }


    template<>
    std::size_t RawSize<HistoryReadParameters>(const HistoryReadParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.HistoryReadDetails) + RawSize(data.TimestampsToReturn) + RawSize(data.ReleaseContinuationPoints) + RawSizeContainer(data.NodesToRead);
    }


    template<>
    std::size_t RawSize<HistoryReadRequest>(const HistoryReadRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<HistoryReadData>(const HistoryReadData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<HistoryReadResponse>(const HistoryReadResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<WriteValue>(const WriteValue& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.AttributeId) + RawSize(data.IndexRange) + RawSize(data.Value);
    }


    template<>
    std::size_t RawSize<WriteParameters>(const WriteParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.NodesToWrite);
    }


    template<>
    std::size_t RawSize<WriteRequest>(const WriteRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<WriteData>(const WriteData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<WriteResponse>(const WriteResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<HistoryUpdateDetails>(const HistoryUpdateDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node);
    }


    template<>
    std::size_t RawSize<UpdateDataDetails>(const UpdateDataDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.PerformInsertReplace) + RawSizeContainer(data.UpdateValues);
    }


    template<>
    std::size_t RawSize<UpdateStructureDataDetails>(const UpdateStructureDataDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.PerformInsertReplace) + RawSizeContainer(data.UpdateValues);
    }


    template<>
    std::size_t RawSize<DeleteRawModifiedDetails>(const DeleteRawModifiedDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.IsDeleteModified) + RawSize(data.StartTime) + RawSize(data.EndTime);
    }


    template<>
    std::size_t RawSize<DeleteAtTimeDetails>(const DeleteAtTimeDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSizeContainer(data.ReqTimes);
    }


    template<>
    std::size_t RawSize<DeleteEventDetails>(const DeleteEventDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSizeContainer(data.EventIds);
    }


    template<>
    std::size_t RawSize<HistoryUpdateResult>(const HistoryUpdateResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSizeContainer(data.OperationResults) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<HistoryUpdateParameters>(const HistoryUpdateParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.HistoryUpdateDetails);
    }


    template<>
    std::size_t RawSize<HistoryUpdateRequest>(const HistoryUpdateRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<HistoryUpdateData>(const HistoryUpdateData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<HistoryUpdateResponse>(const HistoryUpdateResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CallMethodParameters>(const CallMethodParameters& data)
    {
        return RawSize(data.ObjectId) + RawSize(data.MethodId) + RawSizeContainer(data.InputArguments);
    }


    template<>
    std::size_t RawSize<CallMethodRequest>(const CallMethodRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CallMethodResult>(const CallMethodResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSizeContainer(data.InputArgumentResults) + RawSizeContainer(data.InputArgumentDiagnosticInfos) + RawSizeContainer(data.OutputArguments);
    }


    template<>
    std::size_t RawSize<CallParameters>(const CallParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.MethodsToCall);
    }


    template<>
    std::size_t RawSize<CallRequest>(const CallRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CallData>(const CallData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<CallResponse>(const CallResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<MonitoringFilter>(const MonitoringFilter& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength);
    }


    template<>
    std::size_t RawSize<DataChangeFilter>(const DataChangeFilter& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Trigger) + RawSize(data.DeadbandType) + RawSize(data.DeadbandValue);
    }


    template<>
    std::size_t RawSize<EventFilter>(const EventFilter& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.SelectClauses) + RawSize(data.WhereClause);
    }


    template<>
    std::size_t RawSize<ReadEventDetails>(const ReadEventDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.NumValuesPerNode) + RawSize(data.StartTime) + RawSize(data.EndTime) + RawSize(data.Filter);
    }


    template<>
    std::size_t RawSize<AggregateConfiguration>(const AggregateConfiguration& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.UseServerCapabilitiesDefaults) + RawSize(data.TreatUncertainAsBad) + RawSize(data.PercentDataBad) + RawSize(data.PercentDataGood) + RawSize(data.UseSlopedExtrapolation);
    }


    template<>
    std::size_t RawSize<ReadProcessedDetails>(const ReadProcessedDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.StartTime) + RawSize(data.EndTime) + RawSize(data.ProcessingInterval) + RawSizeContainer(data.AggregateType) + RawSize(data.AggregateConfiguration);
    }


    template<>
    std::size_t RawSize<AggregateFilter>(const AggregateFilter& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.StartTime) + RawSize(data.AggregateType) + RawSize(data.ProcessingInterval) + RawSize(data.AggregateConfiguration);
    }


    template<>
    std::size_t RawSize<MonitoringFilterResult>(const MonitoringFilterResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength);
    }


    template<>
    std::size_t RawSize<EventFilterResult>(const EventFilterResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.SelectClauseResults) + RawSizeContainer(data.SelectClauseDiagnosticInfos) + RawSize(data.WhereClauseResult);
    }


    template<>
    std::size_t RawSize<HistoryUpdateEventResult>(const HistoryUpdateEventResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.EventFilterResult);
    }


    template<>
    std::size_t RawSize<AggregateFilterResult>(const AggregateFilterResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.RevisedStartTime) + RawSize(data.RevisedProcessingInterval) + RawSize(data.RevisedAggregateConfiguration);
    }


    template<>
    std::size_t RawSize<MonitoringParameters>(const MonitoringParameters& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ClientHandle) + RawSize(data.SamplingInterval) + RawSize(data.Filter) + RawSize(data.QueueSize) + RawSize(data.DiscardOldest);
    }


    template<>
    std::size_t RawSize<MonitoredItemCreateParameters>(const MonitoredItemCreateParameters& data)
    {
        return RawSize(data.ItemToMonitor) + RawSize(data.MonitoringMode) + RawSize(data.RequestedParameters);
    }


    template<>
    std::size_t RawSize<MonitoredItemCreateRequest>(const MonitoredItemCreateRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<MonitoredItemCreateResult>(const MonitoredItemCreateResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.MonitoredItemId) + RawSize(data.RevisedSamplingInterval) + RawSize(data.RevisedQueueSize) + RawSize(data.FilterResult);
    }


    template<>
    std::size_t RawSize<CreateMonitoredItemsParameters>(const CreateMonitoredItemsParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.TimestampsToReturn) + RawSizeContainer(data.ItemsToCreate);
    }


    template<>
    std::size_t RawSize<CreateMonitoredItemsRequest>(const CreateMonitoredItemsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CreateMonitoredItemsData>(const CreateMonitoredItemsData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<CreateMonitoredItemsResponse>(const CreateMonitoredItemsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<MonitoredItemModifyParameters>(const MonitoredItemModifyParameters& data)
    {
        return RawSize(data.MonitoredItemId) + RawSize(data.RequestedParameters);
    }


    template<>
    std::size_t RawSize<MonitoredItemModifyRequest>(const MonitoredItemModifyRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<MonitoredItemModifyResult>(const MonitoredItemModifyResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.RevisedSamplingInterval) + RawSize(data.RevisedQueueSize) + RawSize(data.FilterResult);
    }


    template<>
    std::size_t RawSize<ModifyMonitoredItemsParameters>(const ModifyMonitoredItemsParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.TimestampsToReturn) + RawSizeContainer(data.ItemsToModify);
    }


    template<>
    std::size_t RawSize<ModifyMonitoredItemsRequest>(const ModifyMonitoredItemsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ModifyMonitoredItemsData>(const ModifyMonitoredItemsData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<ModifyMonitoredItemsResponse>(const ModifyMonitoredItemsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SetMonitoringModeParameters>(const SetMonitoringModeParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.MonitoringMode) + RawSizeContainer(data.MonitoredItemIds);
    }


    template<>
    std::size_t RawSize<SetMonitoringModeRequest>(const SetMonitoringModeRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SetMonitoringModeData>(const SetMonitoringModeData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<SetMonitoringModeResponse>(const SetMonitoringModeResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SetTriggeringParameters>(const SetTriggeringParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.TriggeringItemId) + RawSizeContainer(data.LinksToAdd) + RawSizeContainer(data.LinksToRemove);
    }


    template<>
    std::size_t RawSize<SetTriggeringRequest>(const SetTriggeringRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SetTriggeringData>(const SetTriggeringData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.AddResults) + RawSizeContainer(data.AddDiagnosticInfos) + RawSizeContainer(data.RemoveResults) + RawSizeContainer(data.RemoveDiagnosticInfos);
    }


    template<>
    std::size_t RawSize<SetTriggeringResponse>(const SetTriggeringResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteMonitoredItemsParameters>(const DeleteMonitoredItemsParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSizeContainer(data.MonitoredItemIds);
    }


    template<>
    std::size_t RawSize<DeleteMonitoredItemsRequest>(const DeleteMonitoredItemsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteMonitoredItemsData>(const DeleteMonitoredItemsData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<DeleteMonitoredItemsResponse>(const DeleteMonitoredItemsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CreateSubscriptionParameters>(const CreateSubscriptionParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.RequestedPublishingInterval) + RawSize(data.RequestedLifetimeCount) + RawSize(data.RequestedMaxKeepAliveCount) + RawSize(data.MaxNotificationsPerPublish) + RawSize(data.PublishingEnabled) + RawSize(data.Priority);
    }


    template<>
    std::size_t RawSize<CreateSubscriptionRequest>(const CreateSubscriptionRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<CreateSubscriptionData>(const CreateSubscriptionData& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.RevisedPublishingInterval) + RawSize(data.RevisedLifetimeCount) + RawSize(data.RevisedMaxKeepAliveCount);
    }


    template<>
    std::size_t RawSize<CreateSubscriptionResponse>(const CreateSubscriptionResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ModifySubscriptionParameters>(const ModifySubscriptionParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.RequestedPublishingInterval) + RawSize(data.RequestedLifetimeCount) + RawSize(data.RequestedMaxKeepAliveCount) + RawSize(data.MaxNotificationsPerPublish) + RawSize(data.Priority);
    }


    template<>
    std::size_t RawSize<ModifySubscriptionRequest>(const ModifySubscriptionRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ModifySubscriptionData>(const ModifySubscriptionData& data)
    {
        return RawSize(data.Header) + RawSize(data.RevisedPublishingInterval) + RawSize(data.RevisedLifetimeCount) + RawSize(data.RevisedMaxKeepAliveCount);
    }


    template<>
    std::size_t RawSize<ModifySubscriptionResponse>(const ModifySubscriptionResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SetPublishingModeParameters>(const SetPublishingModeParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.PublishingEnabled) + RawSizeContainer(data.SubscriptionIds);
    }


    template<>
    std::size_t RawSize<SetPublishingModeRequest>(const SetPublishingModeRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<SetPublishingModeData>(const SetPublishingModeData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<SetPublishingModeResponse>(const SetPublishingModeResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<NotificationMessage>(const NotificationMessage& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SequenceNumber) + RawSize(data.PublishTime) + RawSizeContainer(data.NotificationData);
    }


    template<>
    std::size_t RawSize<NotificationData>(const NotificationData& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength);
    }


    template<>
    std::size_t RawSize<MonitoredItemNotification>(const MonitoredItemNotification& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ClientHandle) + RawSize(data.Value);
    }


    template<>
    std::size_t RawSize<DataChangeNotification>(const DataChangeNotification& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.MonitoredItems) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<EventFieldList>(const EventFieldList& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ClientHandle) + RawSizeContainer(data.EventFields);
    }


    template<>
    std::size_t RawSize<EventNotificationList>(const EventNotificationList& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.Events);
    }


    template<>
    std::size_t RawSize<HistoryEventFieldList>(const HistoryEventFieldList& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.EventFields);
    }


    template<>
    std::size_t RawSize<HistoryEvent>(const HistoryEvent& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.Events);
    }


    template<>
    std::size_t RawSize<UpdateEventDetails>(const UpdateEventDetails& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Node) + RawSize(data.PerformInsertReplace) + RawSize(data.Filter) + RawSizeContainer(data.EventData);
    }


    template<>
    std::size_t RawSize<StatusChangeNotification>(const StatusChangeNotification& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.DiagnosticInfo);
    }


    template<>
    std::size_t RawSize<SubscriptionAcknowledgement>(const SubscriptionAcknowledgement& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SubscriptionId) + RawSize(data.SequenceNumber);
    }


    template<>
    std::size_t RawSize<PublishParameters>(const PublishParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.SubscriptionAcknowledgements);
    }


    template<>
    std::size_t RawSize<PublishRequest>(const PublishRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<PublishData>(const PublishData& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSizeContainer(data.AvailableSequenceNumbers) + RawSize(data.MoreNotifications) + RawSize(data.NotificationMessage) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<PublishResponse>(const PublishResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<RepublishParameters>(const RepublishParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.SubscriptionId) + RawSize(data.RetransmitSequenceNumber);
    }


    template<>
    std::size_t RawSize<RepublishRequest>(const RepublishRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<RepublishData>(const RepublishData& data)
    {
        return RawSize(data.Header) + RawSize(data.NotificationMessage);
    }


    template<>
    std::size_t RawSize<RepublishResponse>(const RepublishResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<TransferResult>(const TransferResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSizeContainer(data.AvailableSequenceNumbers);
    }


    template<>
    std::size_t RawSize<TransferSubscriptionsParameters>(const TransferSubscriptionsParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.SubscriptionIds) + RawSize(data.SendInitialValues);
    }


    template<>
    std::size_t RawSize<TransferSubscriptionsRequest>(const TransferSubscriptionsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<TransferSubscriptionsData>(const TransferSubscriptionsData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<TransferSubscriptionsResponse>(const TransferSubscriptionsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteSubscriptionsParameters>(const DeleteSubscriptionsParameters& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.SubscriptionIds);
    }


    template<>
    std::size_t RawSize<DeleteSubscriptionsRequest>(const DeleteSubscriptionsRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<DeleteSubscriptionsData>(const DeleteSubscriptionsData& data)
    {
        return RawSize(data.Header) + RawSizeContainer(data.Results) + RawSizeContainer(data.DiagnosticInfos);
    }


    template<>
    std::size_t RawSize<DeleteSubscriptionsResponse>(const DeleteSubscriptionsResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<ScalarTestType>(const ScalarTestType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Boolean) + RawSize(data.SByte) + RawSize(data.Byte) + RawSize(data.Int16) + RawSize(data.UInt16) + RawSize(data.Int32) + RawSize(data.UInt32) + RawSize(data.Int64) + RawSize(data.UInt64) + RawSize(data.Float) + RawSize(data.Double) + RawSize(data.String) + RawSize(data.DateTime) + RawSize(data.Guid) + RawSize(data.ByteString) + RawSize(data.XmlElement) + RawSize(data.Node) + RawSize(data.Node) + RawSize(data.Status) + RawSize(data.DiagnosticInfo) + RawSize(data.QualifiedName) + RawSize(data.LocalizedText) + RawSize(data.ExtensionObject) + RawSize(data.DataValue) + RawSize(data.EnumeratedValue);
    }


    template<>
    std::size_t RawSize<ArrayTestType>(const ArrayTestType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.Booleans) + RawSizeContainer(data.SBytes) + RawSizeContainer(data.Int16s) + RawSizeContainer(data.UInt16s) + RawSizeContainer(data.Int32s) + RawSizeContainer(data.UInt32s) + RawSizeContainer(data.Int64s) + RawSizeContainer(data.UInt64s) + RawSizeContainer(data.Floats) + RawSizeContainer(data.Doubles) + RawSizeContainer(data.Strings) + RawSizeContainer(data.DateTimes) + RawSizeContainer(data.Guids) + RawSizeContainer(data.ByteStrings) + RawSizeContainer(data.XmlElements) + RawSizeContainer(data.NodeIds) + RawSizeContainer(data.ExpandedNodeIds) + RawSizeContainer(data.StatusCodes) + RawSizeContainer(data.DiagnosticInfos) + RawSizeContainer(data.QualifiedNames) + RawSizeContainer(data.LocalizedTexts) + RawSizeContainer(data.ExtensionObjects) + RawSizeContainer(data.DataValues) + RawSizeContainer(data.Variants) + RawSizeContainer(data.EnumeratedValues);
    }


    template<>
    std::size_t RawSize<CompositeTestType>(const CompositeTestType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Field1) + RawSize(data.Field2);
    }


    template<>
    std::size_t RawSize<TestStackParameters>(const TestStackParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.TestId) + RawSize(data.Iteration) + RawSize(data.Input);
    }


    template<>
    std::size_t RawSize<TestStackRequest>(const TestStackRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<TestStackData>(const TestStackData& data)
    {
        return RawSize(data.Header) + RawSize(data.Output);
    }


    template<>
    std::size_t RawSize<TestStackResponse>(const TestStackResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<TestStackExParameters>(const TestStackExParameters& data)
    {
        return RawSize(data.Header) + RawSize(data.TestId) + RawSize(data.Iteration) + RawSize(data.Input);
    }


    template<>
    std::size_t RawSize<TestStackExRequest>(const TestStackExRequest& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<TestStackExData>(const TestStackExData& data)
    {
        return RawSize(data.Header) + RawSize(data.Output);
    }


    template<>
    std::size_t RawSize<TestStackExResponse>(const TestStackExResponse& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Parameters);
    }


    template<>
    std::size_t RawSize<BuildInfo>(const BuildInfo& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ProductUri) + RawSize(data.ManufacturerName) + RawSize(data.ProductName) + RawSize(data.SoftwareVersion) + RawSize(data.BuildNumber) + RawSize(data.BuildDate);
    }


    template<>
    std::size_t RawSize<RedundantServerDataType>(const RedundantServerDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ServerId) + RawSize(data.ServiceLevel) + RawSize(data.ServerState);
    }


    template<>
    std::size_t RawSize<EndpointUrlListDataType>(const EndpointUrlListDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSizeContainer(data.EndpointUrlList);
    }


    template<>
    std::size_t RawSize<NetworkGroupDataType>(const NetworkGroupDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ServerUri) + RawSizeContainer(data.NetworkPaths);
    }


    template<>
    std::size_t RawSize<SamplingIntervalDiagnosticsDataType>(const SamplingIntervalDiagnosticsDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SamplingInterval) + RawSize(data.MonitoredItemCount) + RawSize(data.MaxMonitoredItemCount) + RawSize(data.DisabledMonitoredItemCount);
    }


    template<>
    std::size_t RawSize<ServerDiagnosticsSummaryDataType>(const ServerDiagnosticsSummaryDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.ServerViewCount) + RawSize(data.CurrentSessionCount) + RawSize(data.CumulatedSessionCount) + RawSize(data.SecurityRejectedSessionCount) + RawSize(data.RejectedSessionCount) + RawSize(data.SessionTimeoutCount) + RawSize(data.SessionAbortCount) + RawSize(data.CurrentSubscriptionCount) + RawSize(data.CumulatedSubscriptionCount) + RawSize(data.PublishingIntervalCount) + RawSize(data.SecurityRejectedRequestsCount) + RawSize(data.RejectedRequestsCount);
    }


    template<>
    std::size_t RawSize<ServerStatusDataType>(const ServerStatusDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.StartTime) + RawSize(data.CurrentTime) + RawSize(data.State) + RawSize(data.BuildInfo) + RawSize(data.SecondsTillShutdown) + RawSize(data.ShutdownReason);
    }


    template<>
    std::size_t RawSize<SessionSecurityDiagnosticsDataType>(const SessionSecurityDiagnosticsDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SessionId) + RawSize(data.ClientUserIdOfSession) + RawSizeContainer(data.ClientUserIdHistory) + RawSize(data.AuthenticationMechanism) + RawSize(data.TransportProtocol) + RawSize(data.SecurityMode) + RawSize(data.SecurityPolicyUri) + RawSize(data.ClientCertificate);
    }


    template<>
    std::size_t RawSize<ServiceCounterDataType>(const ServiceCounterDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.TotalCount) + RawSize(data.ErrorCount);
    }


    template<>
    std::size_t RawSize<SessionDiagnosticsDataType>(const SessionDiagnosticsDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SessionId) + RawSize(data.SessionName) + RawSize(data.ClientDescription) + RawSize(data.ServerUri) + RawSize(data.EndpointUrl) + RawSizeContainer(data.LocaleIds) + RawSize(data.ActualSessionTimeout) + RawSize(data.MaxResponseMessageSize) + RawSize(data.ClientConnectionTime) + RawSize(data.ClientLastContactTime) + RawSize(data.CurrentSubscriptionsCount) + RawSize(data.CurrentMonitoredItemsCount) + RawSize(data.CurrentPublishRequestsInQueue) + RawSize(data.TotalRequestCount) + RawSize(data.UnauthorizedRequestCount) + RawSize(data.ReadCount) + RawSize(data.HistoryReadCount) + RawSize(data.WriteCount) + RawSize(data.HistoryUpdateCount) + RawSize(data.CallCount) + RawSize(data.CreateMonitoredItemsCount) + RawSize(data.ModifyMonitoredItemsCount) + RawSize(data.SetMonitoringModeCount) + RawSize(data.SetTriggeringCount) + RawSize(data.DeleteMonitoredItemsCount) + RawSize(data.CreateSubscriptionCount) + RawSize(data.ModifySubscriptionCount) + RawSize(data.SetPublishingModeCount) + RawSize(data.PublishCount) + RawSize(data.RepublishCount) + RawSize(data.TransferSubscriptionsCount) + RawSize(data.DeleteSubscriptionsCount) + RawSize(data.AddNodesCount) + RawSize(data.AddReferencesCount) + RawSize(data.DeleteNodesCount) + RawSize(data.DeleteReferencesCount) + RawSize(data.BrowseCount) + RawSize(data.BrowseNextCount) + RawSize(data.TranslateBrowsePathsToNodeIdsCount) + RawSize(data.QueryFirstCount) + RawSize(data.QueryNextCount) + RawSize(data.RegisterNodesCount) + RawSize(data.UnregisterNodesCount);
    }


    template<>
    std::size_t RawSize<StatusResult>(const StatusResult& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Status) + RawSize(data.DiagnosticInfo);
    }


    template<>
    std::size_t RawSize<SubscriptionDiagnosticsDataType>(const SubscriptionDiagnosticsDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.SessionId) + RawSize(data.SubscriptionId) + RawSize(data.Priority) + RawSize(data.PublishingInterval) + RawSize(data.MaxKeepAliveCount) + RawSize(data.MaxLifetimeCount) + RawSize(data.MaxNotificationsPerPublish) + RawSize(data.PublishingEnabled) + RawSize(data.ModifyCount) + RawSize(data.EnableCount) + RawSize(data.DisableCount) + RawSize(data.RepublishRequestCount) + RawSize(data.RepublishMessageRequestCount) + RawSize(data.RepublishMessageCount) + RawSize(data.TransferRequestCount) + RawSize(data.TransferredToAltClientCount) + RawSize(data.TransferredToSameClientCount) + RawSize(data.PublishRequestCount) + RawSize(data.DataChangeNotificationsCount) + RawSize(data.EventNotificationsCount) + RawSize(data.NotificationsCount) + RawSize(data.LatePublishRequestCount) + RawSize(data.CurrentKeepAliveCount) + RawSize(data.CurrentLifetimeCount) + RawSize(data.UnacknowledgedMessageCount) + RawSize(data.DiscardedMessageCount) + RawSize(data.MonitoredItemCount) + RawSize(data.DisabledMonitoredItemCount) + RawSize(data.MonitoringQueueOverflowCount) + RawSize(data.NextSequenceNumber) + RawSize(data.EventQueueOverFlowCount);
    }


    template<>
    std::size_t RawSize<ModelChangeStructureDataType>(const ModelChangeStructureDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Affected) + RawSize(data.AffectedType) + RawSize(data.Verb);
    }


    template<>
    std::size_t RawSize<SemanticChangeStructureDataType>(const SemanticChangeStructureDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Affected) + RawSize(data.AffectedType);
    }


    template<>
    std::size_t RawSize<Range>(const Range& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Low) + RawSize(data.High);
    }


    template<>
    std::size_t RawSize<EUInformation>(const EUInformation& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.NamespaceUri) + RawSize(data.UnitId) + RawSize(data.DisplayName) + RawSize(data.Description);
    }


    template<>
    std::size_t RawSize<ComplexNumberType>(const ComplexNumberType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Real) + RawSize(data.Imaginary);
    }


    template<>
    std::size_t RawSize<DoubleComplexNumberType>(const DoubleComplexNumberType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Real) + RawSize(data.Imaginary);
    }


    template<>
    std::size_t RawSize<AxisInformation>(const AxisInformation& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.EngineeringUnits) + RawSize(data.EURange) + RawSize(data.Title) + RawSize(data.AxisScaleType) + RawSizeContainer(data.AxisSteps);
    }


    template<>
    std::size_t RawSize<XVType>(const XVType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.X) + RawSize(data.Value);
    }


    template<>
    std::size_t RawSize<ProgramDiagnosticDataType>(const ProgramDiagnosticDataType& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.CreateSessionId) + RawSize(data.CreateClientName) + RawSize(data.InvocationCreationTime) + RawSize(data.LastTransitionTime) + RawSize(data.LastMethodCall) + RawSize(data.LastMethodSessionId) + RawSizeContainer(data.LastMethodInputArguments) + RawSizeContainer(data.LastMethodOutputArguments) + RawSize(data.LastMethodCallTime) + RawSize(data.LastMethodReturnStatus);
    }


    template<>
    std::size_t RawSize<Annotation>(const Annotation& data)
    {
        return RawSize(data.Encoding) + RawSize(data.TypeId) + RawSize(data.BodyLength) + RawSize(data.Message) + RawSize(data.UserName) + RawSize(data.AnnotationTime);
    }


    template<>
    std::size_t RawSize<OpenFileMode>(const OpenFileMode& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<NodeClass>(const NodeClass& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<ApplicationType>(const ApplicationType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<MessageSecurityMode>(const MessageSecurityMode& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<UserTokenType>(const UserTokenType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<SecurityTokenRequestType>(const SecurityTokenRequestType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<NodeAttributesMask>(const NodeAttributesMask& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<AttributeWriteMask>(const AttributeWriteMask& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<BrowseDirection>(const BrowseDirection& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<BrowseResultMask>(const BrowseResultMask& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<ComplianceLevel>(const ComplianceLevel& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<FilterOperator>(const FilterOperator& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<TimestampsToReturn>(const TimestampsToReturn& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<HistoryUpdateType>(const HistoryUpdateType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<PerformUpdateType>(const PerformUpdateType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<MonitoringMode>(const MonitoringMode& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<DataChangeTrigger>(const DataChangeTrigger& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<DeadbandType>(const DeadbandType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<EnumeratedTestType>(const EnumeratedTestType& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<RedundancySupport>(const RedundancySupport& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<ServerState>(const ServerState& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<ModelChangeStructureVerbMask>(const ModelChangeStructureVerbMask& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<AxisScaleEnumeration>(const AxisScaleEnumeration& data)
    {
        return sizeof(uint32_t);
    }


    template<>
    std::size_t RawSize<ExceptionDeviationFormat>(const ExceptionDeviationFormat& data)
    {
        return sizeof(uint32_t);
    }


   }

} // namespace
    
