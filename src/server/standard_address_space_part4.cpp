
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include "standard_address_space_parts.h"
#include <opc/ua/protocol/string_utils.h>
#include <opc/common/addons_core/addon.h>
#include <opc/ua/protocol/node_classes.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/services/node_management.h>

#include <algorithm>
#include <iostream>
#include <map>

namespace OpcUa
{
  void CreateAddressSpacePart4(OpcUa::NodeManagementServices& registry)
  {
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=18");
        node.BrowseName = ToQualifiedName("ExpandedNodeId");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=24");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Describes a value that is an absolute identifier for a node.'");
        attrs.DisplayName = LocalizedText("ExpandedNodeId");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=19");
        node.BrowseName = ToQualifiedName("StatusCode");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=24");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Describes a value that is a code representing the outcome of an operation by a Server.'");
        attrs.DisplayName = LocalizedText("StatusCode");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=23");
        node.BrowseName = ToQualifiedName("DataValue");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=24");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Describes a value that is a structure containing a value, a status code and timestamps.'");
        attrs.DisplayName = LocalizedText("DataValue");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=25");
        node.BrowseName = ToQualifiedName("DiagnosticInfo");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=24");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Describes a value that is a structure containing diagnostics associated with a StatusCode.'");
        attrs.DisplayName = LocalizedText("DiagnosticInfo");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=288");
        node.BrowseName = ToQualifiedName("IntegerId");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=7");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A numeric identifier for an object.'");
        attrs.DisplayName = LocalizedText("IntegerId");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=307");
        node.BrowseName = ToQualifiedName("ApplicationType");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'The types of applications.'");
        attrs.DisplayName = LocalizedText("ApplicationType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=307");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7597");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7597");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=307");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7597");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=308");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Describes an application and how to find it.'");
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=311");
        node.BrowseName = ToQualifiedName("ApplicationInstanceCertificate");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=15");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A certificate for an instance of an application.'");
        attrs.DisplayName = LocalizedText("ApplicationInstanceCertificate");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=302");
        node.BrowseName = ToQualifiedName("MessageSecurityMode");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'The type of security to use on a message.'");
        attrs.DisplayName = LocalizedText("MessageSecurityMode");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=302");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7595");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7595");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=302");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7595");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=303");
        node.BrowseName = ToQualifiedName("UserTokenType");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'The possible user token types.'");
        attrs.DisplayName = LocalizedText("UserTokenType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=303");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7596");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7596");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=303");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7596");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=304");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Describes a user token that can be used with a server.'");
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=312");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'The description of a endpoint that can be used to access a server.'");
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=432");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'The information required to register a server with a discovery server.'");
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=315");
        node.BrowseName = ToQualifiedName("SecurityTokenRequestType");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Indicates whether a token if being created or renewed.'");
        attrs.DisplayName = LocalizedText("SecurityTokenRequestType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=315");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7598");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7598");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=315");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7598");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=344");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A software certificate with a digital signature.'");
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=388");
        node.BrowseName = ToQualifiedName("AuthenticationToken");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=17");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A unique identifier for a session used to authenticate requests.'");
        attrs.DisplayName = LocalizedText("AuthenticationToken");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=316");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A base type for a user identity token.'");
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=319");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=316");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A token representing an anonymous user.'");
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=322");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=316");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A token representing a user identified by a user name and password.'");
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=325");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=316");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A token representing a user identified by an X509 certificate.'");
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=938");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=316");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A token representing a user identified by a WS-Security XML token.'");
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=348");
        node.BrowseName = ToQualifiedName("NodeAttributesMask");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'The bits used to specify default attributes for a new node.'");
        attrs.DisplayName = LocalizedText("NodeAttributesMask");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=348");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=11881");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11881");
        node.BrowseName = ToQualifiedName("EnumValues");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=348");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValues");
        attrs.Type = ToNodeId("i=7594");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11881");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=376");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A request to add a node to the server address space.'");
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=379");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A request to add a reference to the server address space.'");
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=382");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A request to delete a node to the server address space.'");
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=385");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A request to delete a node from the server address space.'");
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=347");
        node.BrowseName = ToQualifiedName("AttributeWriteMask");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Define bits used to indicate which attributes are writeable.'");
        attrs.DisplayName = LocalizedText("AttributeWriteMask");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=347");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=11882");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11882");
        node.BrowseName = ToQualifiedName("EnumValues");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=347");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValues");
        attrs.Type = ToNodeId("i=7594");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11882");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=521");
        node.BrowseName = ToQualifiedName("ContinuationPoint");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=15");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'An identifier for a suspended query or browse operation.'");
        attrs.DisplayName = LocalizedText("ContinuationPoint");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=289");
        node.BrowseName = ToQualifiedName("Counter");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=7");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A monotonically increasing value.'");
        attrs.DisplayName = LocalizedText("Counter");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=291");
        node.BrowseName = ToQualifiedName("NumericRange");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=12");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'Specifies a range of array indexes.'");
        attrs.DisplayName = LocalizedText("NumericRange");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=292");
        node.BrowseName = ToQualifiedName("Time");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=12");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A time value specified as HH:MM:SS.SSS.'");
        attrs.DisplayName = LocalizedText("Time");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=293");
        node.BrowseName = ToQualifiedName("Date");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=13");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A date value.'");
        attrs.DisplayName = LocalizedText("Date");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=331");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=334");
        node.BrowseName = ToQualifiedName("ComplianceLevel");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplianceLevel");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=334");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7599");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7599");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=334");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7599");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=335");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=341");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=576");
        node.BrowseName = ToQualifiedName("FilterOperator");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperator");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=576");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7605");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7605");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=576");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7605");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=583");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=586");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=589");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=592");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=589");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=595");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=589");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=598");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=589");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=601");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=589");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=659");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11234");
        node.BrowseName = ToQualifiedName("HistoryUpdateType");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11234");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=11884");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11884");
        node.BrowseName = ToQualifiedName("EnumValues");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11234");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValues");
        attrs.Type = ToNodeId("i=7594");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11884");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11293");
        node.BrowseName = ToQualifiedName("PerformUpdateType");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("PerformUpdateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11293");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=11885");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11885");
        node.BrowseName = ToQualifiedName("EnumValues");
        node.NodeClass = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11293");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValues");
        attrs.Type = ToNodeId("i=7594");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11885");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=719");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=725");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=719");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=948");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=920");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.NodeClass = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=309");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=308");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=309");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8300");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=305");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=304");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=305");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8297");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=313");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=312");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=313");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8303");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=433");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=432");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=433");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8417");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=345");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=344");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=345");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8333");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=317");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=316");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=317");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8306");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=320");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=319");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=320");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8309");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=323");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=322");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=323");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8312");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=326");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=325");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=326");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8315");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=939");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=938");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=939");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8318");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=377");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=376");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=377");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8363");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=380");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=379");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=380");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8366");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=383");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=382");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=383");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8369");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=386");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=385");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=386");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8372");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=332");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=331");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=332");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8321");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=336");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=335");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=336");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8324");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=342");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=341");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=342");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8330");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=584");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=583");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=584");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8564");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=587");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=586");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=587");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8567");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=590");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=589");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=590");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8570");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=593");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=592");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=593");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8573");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=596");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=595");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=596");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8576");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=599");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=598");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=599");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8579");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=602");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=601");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=602");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8582");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=660");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=659");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=660");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8639");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=720");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=719");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=720");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8702");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=726");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=725");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=726");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8708");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=949");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=948");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=949");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8711");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=921");
        node.BrowseName = ToQualifiedName("Default XML");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=920");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=921");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8807");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=310");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=308");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=310");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7665");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=306");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=304");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=306");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7662");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=314");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=312");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=314");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7668");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=434");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=432");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=434");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7782");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=346");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=344");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=346");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7698");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=318");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=316");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=318");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7671");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=321");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=319");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=321");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7674");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=324");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=322");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=324");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7677");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=327");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=325");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=327");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7680");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=940");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=938");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=940");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7683");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=378");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=376");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=378");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7728");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=381");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=379");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=381");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7731");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=384");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=382");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=384");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7734");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=387");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=385");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=387");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7737");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=333");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=331");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=333");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7686");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=337");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=335");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=337");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7689");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=343");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=341");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=343");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7695");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=585");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=583");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=585");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7929");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=588");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=586");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=588");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7932");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=591");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=589");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=591");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7935");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=594");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=592");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=594");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7938");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=597");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=595");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=597");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7941");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=600");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=598");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=600");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7944");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=603");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=601");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=603");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=7947");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=661");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=659");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=661");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8004");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=721");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=719");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=721");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8067");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=727");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=725");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=727");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8073");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=950");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=948");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=950");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8076");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=922");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.NodeClass = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=920");
        node.ReferenceTypeId = ReferenceID::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasDescription;
        ref.SourceNodeId = ToNodeId("i=922");
        refNodeClass = NodeClass::DataType;
        ref.NodeId = ToNodeId("i=8172");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }

   }

} // namespace
    
